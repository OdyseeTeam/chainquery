// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\xdf\x73\xda\x3a\x16\x7e\xcf\x5f\xa1\xb7\x6b\x66\xc3\x4c\xc8\xed\xde\xed\xce\x4e\x1f\x1c\xa3\x24\xbe\x05\x93\xb5\x4d\xb7\xdd\x17\x21\xb0\x00\x4d\x8d\x4d\x2d\xb9\x0d\xfb\xd7\xef\x48\xb2\xb1\xfc\x0b\x1c\xa0\x33\x4d\xee\x5b\x88\x3f\x1d\x1d\x4b\xdf\xf9\xce\x39\x92\xfb\x7d\xf0\xb7\x0d\x5d\x25\x98\x13\x30\xdd\x5e\x5d\xe9\xbf\x3d\x8e\x39\xd9\x90\x88\xdf\x91\x15\x8d\xae\x2c\x17\x9a\x3e\x04\xbe\x79\x37\x82\xc0\xbe\x07\xce\xc4\x07\xf0\xb3\xed\xf9\x1e\x98\xcd\xc3\x78\xf1\x95\xcd\xae\x8c\x2b\x00\x00\x98\xd1\x60\x06\x3c\xe8\xda\xe6\xe8\xfa\x4a\xfd\x67\x4e\x39\x9b\x81\x4f\xa6\x6b\x3d\x9a\xae\x71\x7b\xd3\x93\xc3\x9d\xe9\x68\x74\xad\x00\x8b\x35\xa6\xd1\x8f\x38\xf9\x5a\xa0\xfe\x71\xd3\x03\xe2\x0f\xd3\xf2\xa1\x0b\x3c\xe8\x83\x10\x73\x1a\x0d\x80\x35\x19\x8d\x84\x2b\xea\x27\x5a\x91\x88\x24\x38\x44\x0b\x5a\x33\x1a\x47\x4b\x9a\x6c\x30\xa7\x71\xc4\x66\xc0\x76\x7c\xf8\x00\x5d\x30\x75\x3c\xfb\xc1\x81\xc3\x2a\x3c\xa0\xcb\x25\x5d\xa4\x21\xdf\xcd\xc0\x10\x5a\xf6\xd8\x1c\x19\x83\xf7\xd7\xef\x6b\xce\xae\x31\x5b\x5f\xc4\x4f\x90\x1b\x24\x74\xb5\xe6\x33\x70\x67\x3f\xd8\x8e\xdf\xea\xe0\x86\x04\x14\x47\x88\xd3\x0d\xe9\x80\x4d\xbe\x86\x04\x25\x71\xcc\x2f\xb9\xa4\x11\xde\x10\xb4\x08\x31\xdd\x5c\xde\x74\x1c\x2d\x8e\xbf\xd7\x36\x21\xdf\x69\x9c\x32\x24\x39\x87\xce\xdd\x8a\x7c\x6e\xf2\xcc\x2f\x6b\x51\x19\x63\xf4\x7f\xc7\x5f\x89\xe3\x64\x45\x2e\xba\x94\x6a\xf2\x4e\x3c\xf9\x4e\x12\x46\xe3\xa8\x2b\x0e\xad\xc9\x73\xe1\xe9\xe0\x6c\x4f\x79\x82\x23\x86\x17\x5c\x9a\xc6\x6c\x4d\xd8\x0c\xf8\xf0\xb3\x5f\x7f\xcc\xd0\x36\x89\x17\x84\x31\x12\xcc\x80\x6f\x3b\x5f\x6c\xc7\x37\x06\x3d\x30\x84\xf7\xe6\x74\xe4\x83\x1b\xcd\x74\x16\xfe\x09\xc1\x5c\xa0\x87\xa6\x0f\x7d\x7b\x0c\x8b\xb8\xcb\x07\x59\x53\xd7\x85\x8e\x8f\xc4\x53\xcf\x37\xc7\x4f\x79\xf4\xc4\x01\x5d\xd2\x17\x8e\x05\x13\x07\x4c\x9f\xc4\x80\x26\xbb\xd2\xf0\x93\x6b\x8f\x4d\xf7\x0b\xf8\x08\xbf\x80\xd9\xd3\x47\x74\x27\x36\x6a\x06\x0c\x21\x99\x3d\x35\xf7\xd4\xb1\xff\x3d\x85\x0a\x61\x07\xcf\x0a\xf2\x28\x49\x69\x28\xe5\xc9\x80\xd6\xc4\xf1\x7c\xd7\x14\x9b\x36\xb3\x22\x8e\xfc\x62\xad\x1e\xe5\x4a\x7e\xc2\x21\x0d\xfe\x64\x62\x73\xad\x47\x68\x7d\x34\x1a\x57\xdb\xf6\xd4\x6b\x4d\x5c\xf0\xa7\x37\x71\xd0\x27\x73\x64\x0f\x1b\xa1\xbd\x6c\x62\xdb\x19\xc2\xcf\xba\x73\x99\x7a\x19\xb9\x8e\xb5\xe0\x7c\xc9\x47\x43\x67\x67\x1d\x39\x96\x1a\x97\x43\x75\xc5\xab\x63\x9f\x32\x2d\x28\x2d\x51\x93\x40\xb4\x38\x64\xe5\x04\x31\xf6\x5c\x69\x41\x8e\xf7\x7c\x30\x0a\x6e\xf4\xae\x7a\x00\x3a\x0f\xb6\x03\x3f\xd8\x51\x14\x0f\xef\x0a\x6a\x3c\x9a\xae\x07\xfd\x0f\x29\x5f\xbe\xdf\xcc\xdf\xed\xc3\x21\xfb\x8d\xd2\x88\x2e\xe2\x80\x88\x78\x70\x27\xff\x41\xf7\x13\x77\x6c\xfa\x1f\xac\xc9\xf8\xc9\x85\x9e\x07\x87\x62\xf7\xd1\xdd\x68\x62\x7d\x44\x9e\xfd\x5f\xf8\xe1\xdd\xbf\x9a\x33\x33\x8c\x82\x93\x73\xb6\x1e\x5a\x8d\x99\x5b\x53\x92\xf9\x4e\xae\x23\x12\x8f\xcf\x56\x46\x1a\x6d\x53\x8e\x16\x71\x1a\xf1\xe3\x39\x39\x4e\xf9\x0b\xd0\xdf\x71\x98\x92\x23\xc9\x7b\x49\x6a\x88\x26\x09\xa9\xa9\x53\xa3\x9a\x36\xe0\x3a\x49\xfe\xc5\x2a\x88\xaa\x8a\xe7\x2b\x54\x79\xae\xe5\x83\x63\x6b\x98\xe0\x1f\x25\x09\xfe\xb5\x54\x54\x77\x29\x7b\xa1\x17\xfb\x55\x15\x61\x4d\x38\xcb\x52\x7c\x3f\x71\xa1\xfd\xe0\x28\xe0\x7d\x09\x58\x92\x9c\x5a\x90\xf4\x80\x0b\xef\xa1\x0b\x1d\x0b\x16\xd5\x71\x45\xbe\xab\x3a\x5f\x91\xef\x2a\x5c\x53\x24\x0d\x99\xeb\x64\x8d\xa8\x07\x47\x65\xba\x97\x0f\x2e\x2d\x67\x97\x81\x87\x05\x53\xc3\xbf\x41\xd9\xc4\x41\x90\x88\x22\xe4\x80\x66\x66\x90\x22\xbe\xdf\x9d\x1d\xdf\x4b\x9a\x30\x8e\x18\x21\x51\xc1\xf7\x5c\x7b\x62\x8e\x43\x94\x90\x05\xa1\xdf\x65\xa8\x75\x94\x36\x39\x8c\x11\x21\xab\x1d\x87\xcc\x71\x88\x65\x89\x5e\xc6\x9b\x9e\x20\x60\xc5\x8b\x7e\x69\x86\xde\xbe\xd2\x5d\x15\xab\xf2\x7b\xbd\x0b\xe4\x78\x85\xd2\x24\xd4\x3b\xc5\x9b\xde\x2f\xab\x43\x55\x1d\x31\xf3\x7d\x3f\x54\xce\x65\x20\x0d\x9b\xd3\xe5\xf0\x00\x5f\x2c\x9d\x21\x57\xb0\x1e\x72\x39\x46\xac\xb8\xbb\xdf\x83\xda\xae\x1c\x1e\xe8\x49\x2e\x18\x0d\xfb\x56\x1f\x70\x97\x53\xc1\xd8\xb3\xa2\x15\xdb\x49\x34\x32\xec\x1b\x14\x0c\x59\xee\x1c\x50\x0b\x5d\xba\xc5\xc3\x63\xcd\x62\xa5\x2e\xbf\x64\x15\xa1\x2a\xb3\x8c\x8f\x4d\xce\xe4\x38\x86\x16\x31\x8d\xe6\x98\x91\xa3\xad\x58\x76\x10\x93\xa3\xcf\xae\x1e\x45\x79\x1f\xa7\xfc\x52\x6d\x7a\x6e\x2e\xaa\x17\x46\x15\x04\xdb\x92\x28\x40\xe9\x36\x50\x64\xee\xf2\xda\x8c\x7c\x4b\x89\x0c\x93\x16\xdb\x4d\xf5\x6a\x3e\x76\x91\xd0\x2d\x47\x8c\xae\x10\x66\x1b\x55\x91\x9d\xf6\x8a\x9a\x25\xd9\xbc\x9f\x64\xe9\xb5\x68\xb0\x2d\x28\x7c\xb8\x8a\x93\x10\x5d\xab\xab\xac\x2f\x57\x6f\x45\xc2\x3f\x6e\xb5\x52\x49\x56\x42\xbb\x6c\xb7\xd4\x7f\x95\x4c\x6b\xb2\x28\xad\x7e\x52\x2c\x31\x32\xba\x34\xf7\xc1\x71\xca\xf5\x0e\x78\x1f\x22\x2d\x36\x3b\x89\xb2\x44\xbe\x55\x49\x46\x0d\x95\x9c\xfc\x7f\x07\x11\x3e\x20\x91\x15\x68\x23\x3f\x6b\xe4\xa3\xc1\xec\xba\x64\xb5\x89\x64\xfb\x1d\xc9\x8b\x07\xc2\x0a\xb6\xe7\x66\xca\x1c\xcb\x72\x4f\x3b\x71\x1b\x6c\xd6\x2b\x93\x0e\x31\xf1\xaa\xe9\xa0\xce\x18\x2e\x97\xa2\x0f\xa8\xba\x88\xcb\xd6\x6c\xc0\x77\x5b\x52\xbe\x24\x39\x47\xef\xb7\xe9\x1c\x7d\x25\xbb\x0b\x65\x8f\xdc\xda\xe9\x19\x44\x1d\x2e\x90\x6f\x29\x4d\x48\x20\xb2\x51\x84\x79\x9a\x90\x86\x7b\x19\xed\x8c\x64\xf0\xc7\x4d\xb1\x22\x7f\x3f\x75\x45\x72\x1e\x87\x94\xf1\x73\xbc\xa7\x4c\x56\x01\xbc\x63\xf6\x17\x50\x34\xdf\xa1\x56\x59\x79\x35\x9d\xcd\x44\x46\xc8\xe1\x04\xa8\x30\x97\xc9\x80\xcd\xb6\x3d\xb1\xa0\x77\xbb\xbd\xe8\xd5\x17\xf8\xb8\xfa\x55\x0f\xcd\xf7\xb2\x57\x3f\x2c\x2f\xb3\xa6\xe5\x98\xbc\x04\x6a\x38\x20\x57\x9e\x1f\xcd\xe0\x93\x74\xcb\x3b\x26\x65\x65\xf1\x0d\x66\xe5\xec\xa8\xb7\x9e\x96\xb3\x07\x3f\x35\x2f\xab\x55\xd5\x72\x5f\x31\x69\xb7\xcc\xac\x0c\x14\x69\xb4\x08\x99\xc2\x52\x99\x9e\x79\xda\x39\x9c\x9d\xab\x76\xff\x7a\xe9\x59\xd7\x90\x3a\x39\x5e\x98\x9b\xbb\x33\x64\x16\x90\x39\xe5\x08\x6f\xd4\xd5\xc3\xb1\x33\x32\x60\x4d\xc6\x63\xe8\xf8\xe0\x37\x2f\xdd\x80\x78\x09\xf8\x9a\x00\xa5\x40\x80\xc7\x80\xaf\x29\x03\xd9\xe4\x60\x19\x27\xf2\x31\x7f\xfe\xad\x48\x01\xc1\xb9\x93\x65\x7c\xea\x30\x5b\x88\x39\x61\x1c\xd5\x6f\x37\x2e\x79\x94\xae\x11\xb5\xb2\x47\xdd\x02\x4a\x33\x55\xb0\xff\x27\xa4\x97\xd6\xb9\x4e\x8a\xb4\x43\xa7\xe1\x85\xe9\x91\xdc\x80\x86\x73\xfc\xb6\x9d\xe9\x68\x77\x28\x28\x2b\xec\x94\xb8\xdb\x71\xb0\x25\x39\x98\x25\x1f\x8d\x8d\xaf\x5b\x3d\xe4\xb7\x2a\x1d\x6b\xfb\x8b\x5e\x73\x36\x97\xfa\x4d\xdf\xd3\xe8\xdf\x53\xdc\xbe\xab\x7f\x1a\x25\xbf\xb6\x11\x3e\x5d\xe8\x32\x41\x19\x54\xdd\x86\x56\xc8\xee\x51\xa0\xdf\x07\x03\xd0\x07\x16\x49\x38\x5d\xd2\x05\xe6\xc4\xdf\x6d\xc9\x35\xb8\x05\x7d\xe0\xf1\x84\xe0\x8d\xf8\x9d\x1d\x8f\xa5\xf3\x90\xb2\x35\x49\xce\xf2\x70\xaf\x67\x09\x59\x92\x84\x44\x0b\xc2\x00\x06\x96\x70\xd4\x0e\xc0\x0f\xca\xd7\x55\x6f\x72\x2d\x2b\xe6\x67\x74\x55\xbe\x38\x38\x6d\xdf\x16\xc5\x3c\x6d\x9f\xa2\xb4\xdc\xa4\x56\xef\x62\x2f\xf2\x95\x8c\xb4\xd9\xef\x03\x33\x08\xa8\x98\x1b\x87\x60\x49\x49\x18\x28\x5d\x27\x98\xed\x00\x8d\x02\xf2\x4c\xa3\x95\x48\x04\x4c\x6e\x0f\x10\x9b\xcb\xb2\x8c\x97\xf2\x75\x9c\x68\x5d\xd4\xe0\xb6\xb7\xcf\x70\xaa\xbb\x93\xde\x8e\xe1\xd0\x9e\x8e\xf5\x8b\xdf\x38\xe2\xa2\xc0\x2e\xb7\xa5\x83\x3f\x6e\x4f\xbd\xf7\x67\x28\x42\x0c\x2d\xd1\x8f\x6e\xfd\x53\x88\xa3\x55\x8a\x57\x97\x68\x89\xf9\x3a\xdd\xcc\x23\x4c\x43\x75\xbb\xa4\xef\x2a\xe5\x61\x79\x9f\x5f\xf2\x7d\xc0\x92\x10\xb4\x48\x13\x41\xd8\x5d\x46\xfe\xdf\x7b\xc5\xeb\x2e\x69\xc8\x49\xf2\x4a\xbf\x57\x6a\x4a\xef\x32\x20\x0f\xb7\x6a\x12\x72\x20\x4d\xb7\xde\x92\x57\xd3\xb5\x7e\x7a\xd9\x38\xc9\x53\x1e\xf9\xf2\xcc\x53\x97\xa1\xb2\xe1\x2c\x03\x88\xbc\x96\x2b\x69\xcb\x55\x9b\x34\x3b\x8d\xe8\xb7\xb4\x76\xa9\xae\xb9\x7d\x9d\x69\xfb\x35\xa8\x19\xac\x76\x97\xd2\xa0\xa5\x0b\x4a\xd6\x5b\x96\x44\xa6\xa5\xb5\xd4\x31\xbd\x9e\x54\x65\xed\x5f\x32\xc4\xab\x79\x7d\xbf\x3f\x55\xc7\xaa\x98\xd3\x3e\x21\x50\xaf\xd3\xa5\x49\x95\xc8\xe6\x1e\x35\x63\x7b\x15\x6c\x66\x32\x65\xe4\x82\x65\x0c\xfe\x39\x68\x68\xa8\x95\x0f\x4a\x9a\x7c\xa9\x4c\x46\x59\xa9\x5a\x86\x8c\xf6\x6a\x62\x14\xca\xd2\xb6\x3a\x4a\x14\x8c\x4c\x1d\x94\x27\xaf\xbf\x0a\x42\x2a\x39\x14\xc5\x50\x51\x59\x1c\x69\x85\xd4\x40\x3d\x47\x1c\x69\xa7\xe5\x32\x7a\xd9\xa8\x3a\x1d\x4b\xf1\x5c\x86\x37\x50\xb8\x25\x9a\x7f\x95\xc6\xf6\xff\x01\x00\x00\xff\xff\xf3\x48\xb2\x5d\x44\x2f\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 12100, mode: os.FileMode(436), modTime: time.Unix(1520944282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

