// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TransactionAddress is an object representing the database table.
type TransactionAddress struct {
	TransactionID uint64 `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	AddressID     uint64 `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`
	// Sum of the inputs to this address for the tx
	DebitAmount float64 `boil:"debit_amount" json:"debit_amount" toml:"debit_amount" yaml:"debit_amount"`
	// Sum of the outputs to this address for the tx
	CreditAmount float64 `boil:"credit_amount" json:"credit_amount" toml:"credit_amount" yaml:"credit_amount"`

	R *transactionAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionAddressColumns = struct {
	TransactionID string
	AddressID     string
	DebitAmount   string
	CreditAmount  string
}{
	TransactionID: "transaction_id",
	AddressID:     "address_id",
	DebitAmount:   "debit_amount",
	CreditAmount:  "credit_amount",
}

var TransactionAddressTableColumns = struct {
	TransactionID string
	AddressID     string
	DebitAmount   string
	CreditAmount  string
}{
	TransactionID: "transaction_address.transaction_id",
	AddressID:     "transaction_address.address_id",
	DebitAmount:   "transaction_address.debit_amount",
	CreditAmount:  "transaction_address.credit_amount",
}

// Generated where

var TransactionAddressWhere = struct {
	TransactionID whereHelperuint64
	AddressID     whereHelperuint64
	DebitAmount   whereHelperfloat64
	CreditAmount  whereHelperfloat64
}{
	TransactionID: whereHelperuint64{field: "`transaction_address`.`transaction_id`"},
	AddressID:     whereHelperuint64{field: "`transaction_address`.`address_id`"},
	DebitAmount:   whereHelperfloat64{field: "`transaction_address`.`debit_amount`"},
	CreditAmount:  whereHelperfloat64{field: "`transaction_address`.`credit_amount`"},
}

// TransactionAddressRels is where relationship names are stored.
var TransactionAddressRels = struct {
	Transaction string
	Address     string
}{
	Transaction: "Transaction",
	Address:     "Address",
}

// transactionAddressR is where relationships are stored.
type transactionAddressR struct {
	Transaction *Transaction `boil:"Transaction" json:"Transaction" toml:"Transaction" yaml:"Transaction"`
	Address     *Address     `boil:"Address" json:"Address" toml:"Address" yaml:"Address"`
}

// NewStruct creates a new relationship struct
func (*transactionAddressR) NewStruct() *transactionAddressR {
	return &transactionAddressR{}
}

// transactionAddressL is where Load methods for each relationship are stored.
type transactionAddressL struct{}

var (
	transactionAddressAllColumns            = []string{"transaction_id", "address_id", "debit_amount", "credit_amount"}
	transactionAddressColumnsWithoutDefault = []string{"transaction_id", "address_id"}
	transactionAddressColumnsWithDefault    = []string{"debit_amount", "credit_amount"}
	transactionAddressPrimaryKeyColumns     = []string{"transaction_id", "address_id"}
	transactionAddressGeneratedColumns      = []string{}
)

type (
	// TransactionAddressSlice is an alias for a slice of pointers to TransactionAddress.
	// This should almost always be used instead of []TransactionAddress.
	TransactionAddressSlice []*TransactionAddress

	transactionAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionAddressType                 = reflect.TypeOf(&TransactionAddress{})
	transactionAddressMapping              = queries.MakeStructMapping(transactionAddressType)
	transactionAddressPrimaryKeyMapping, _ = queries.BindMapping(transactionAddressType, transactionAddressMapping, transactionAddressPrimaryKeyColumns)
	transactionAddressInsertCacheMut       sync.RWMutex
	transactionAddressInsertCache          = make(map[string]insertCache)
	transactionAddressUpdateCacheMut       sync.RWMutex
	transactionAddressUpdateCache          = make(map[string]updateCache)
	transactionAddressUpsertCacheMut       sync.RWMutex
	transactionAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single transactionAddress record from the query using the global executor.
func (q transactionAddressQuery) OneG() (*TransactionAddress, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single transactionAddress record from the query using the global executor, and panics on error.
func (q transactionAddressQuery) OneGP() *TransactionAddress {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single transactionAddress record from the query, and panics on error.
func (q transactionAddressQuery) OneP(exec boil.Executor) *TransactionAddress {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single transactionAddress record from the query.
func (q transactionAddressQuery) One(exec boil.Executor) (*TransactionAddress, error) {
	o := &TransactionAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for transaction_address")
	}

	return o, nil
}

// AllG returns all TransactionAddress records from the query using the global executor.
func (q transactionAddressQuery) AllG() (TransactionAddressSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all TransactionAddress records from the query using the global executor, and panics on error.
func (q transactionAddressQuery) AllGP() TransactionAddressSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all TransactionAddress records from the query, and panics on error.
func (q transactionAddressQuery) AllP(exec boil.Executor) TransactionAddressSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all TransactionAddress records from the query.
func (q transactionAddressQuery) All(exec boil.Executor) (TransactionAddressSlice, error) {
	var o []*TransactionAddress

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TransactionAddress slice")
	}

	return o, nil
}

// CountG returns the count of all TransactionAddress records in the query using the global executor
func (q transactionAddressQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all TransactionAddress records in the query using the global executor, and panics on error.
func (q transactionAddressQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all TransactionAddress records in the query, and panics on error.
func (q transactionAddressQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all TransactionAddress records in the query.
func (q transactionAddressQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count transaction_address rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q transactionAddressQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q transactionAddressQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q transactionAddressQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q transactionAddressQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if transaction_address exists")
	}

	return count > 0, nil
}

// Transaction pointed to by the foreign key.
func (o *TransactionAddress) Transaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	return Transactions(queryMods...)
}

// Address pointed to by the foreign key.
func (o *TransactionAddress) Address(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return Addresses(queryMods...)
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionAddressL) LoadTransaction(e boil.Executor, singular bool, maybeTransactionAddress interface{}, mods queries.Applicator) error {
	var slice []*TransactionAddress
	var object *TransactionAddress

	if singular {
		object = maybeTransactionAddress.(*TransactionAddress)
	} else {
		slice = *maybeTransactionAddress.(*[]*TransactionAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionAddressR{}
		}
		args = append(args, object.TransactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAddressR{}
			}

			for _, a := range args {
				if a == obj.TransactionID {
					continue Outer
				}
			}

			args = append(args, obj.TransactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transaction`),
		qm.WhereIn(`transaction.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransactionAddresses = append(foreign.R.TransactionAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.Transaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransactionAddresses = append(foreign.R.TransactionAddresses, local)
				break
			}
		}
	}

	return nil
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionAddressL) LoadAddress(e boil.Executor, singular bool, maybeTransactionAddress interface{}, mods queries.Applicator) error {
	var slice []*TransactionAddress
	var object *TransactionAddress

	if singular {
		object = maybeTransactionAddress.(*TransactionAddress)
	} else {
		slice = *maybeTransactionAddress.(*[]*TransactionAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionAddressR{}
		}
		args = append(args, object.AddressID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAddressR{}
			}

			for _, a := range args {
				if a == obj.AddressID {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`address`),
		qm.WhereIn(`address.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for address")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Address = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.TransactionAddresses = append(foreign.R.TransactionAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddressID == foreign.ID {
				local.R.Address = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.TransactionAddresses = append(foreign.R.TransactionAddresses, local)
				break
			}
		}
	}

	return nil
}

// SetTransactionG of the transactionAddress to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAddresses.
// Uses the global database handle.
func (o *TransactionAddress) SetTransactionG(insert bool, related *Transaction) error {
	return o.SetTransaction(boil.GetDB(), insert, related)
}

// SetTransactionP of the transactionAddress to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAddresses.
// Panics on error.
func (o *TransactionAddress) SetTransactionP(exec boil.Executor, insert bool, related *Transaction) {
	if err := o.SetTransaction(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionGP of the transactionAddress to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAddresses.
// Uses the global database handle and panics on error.
func (o *TransactionAddress) SetTransactionGP(insert bool, related *Transaction) {
	if err := o.SetTransaction(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransaction of the transactionAddress to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAddresses.
func (o *TransactionAddress) SetTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transaction_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
		strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TransactionID, o.AddressID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.ID
	if o.R == nil {
		o.R = &transactionAddressR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionAddresses: TransactionAddressSlice{o},
		}
	} else {
		related.R.TransactionAddresses = append(related.R.TransactionAddresses, o)
	}

	return nil
}

// SetAddressG of the transactionAddress to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionAddresses.
// Uses the global database handle.
func (o *TransactionAddress) SetAddressG(insert bool, related *Address) error {
	return o.SetAddress(boil.GetDB(), insert, related)
}

// SetAddressP of the transactionAddress to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionAddresses.
// Panics on error.
func (o *TransactionAddress) SetAddressP(exec boil.Executor, insert bool, related *Address) {
	if err := o.SetAddress(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressGP of the transactionAddress to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionAddresses.
// Uses the global database handle and panics on error.
func (o *TransactionAddress) SetAddressGP(insert bool, related *Address) {
	if err := o.SetAddress(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddress of the transactionAddress to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionAddresses.
func (o *TransactionAddress) SetAddress(exec boil.Executor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transaction_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
		strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TransactionID, o.AddressID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AddressID = related.ID
	if o.R == nil {
		o.R = &transactionAddressR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			TransactionAddresses: TransactionAddressSlice{o},
		}
	} else {
		related.R.TransactionAddresses = append(related.R.TransactionAddresses, o)
	}

	return nil
}

// TransactionAddresses retrieves all the records using an executor.
func TransactionAddresses(mods ...qm.QueryMod) transactionAddressQuery {
	mods = append(mods, qm.From("`transaction_address`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`transaction_address`.*"})
	}

	return transactionAddressQuery{q}
}

// FindTransactionAddressG retrieves a single record by ID.
func FindTransactionAddressG(transactionID uint64, addressID uint64, selectCols ...string) (*TransactionAddress, error) {
	return FindTransactionAddress(boil.GetDB(), transactionID, addressID, selectCols...)
}

// FindTransactionAddressP retrieves a single record by ID with an executor, and panics on error.
func FindTransactionAddressP(exec boil.Executor, transactionID uint64, addressID uint64, selectCols ...string) *TransactionAddress {
	retobj, err := FindTransactionAddress(exec, transactionID, addressID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTransactionAddressGP retrieves a single record by ID, and panics on error.
func FindTransactionAddressGP(transactionID uint64, addressID uint64, selectCols ...string) *TransactionAddress {
	retobj, err := FindTransactionAddress(boil.GetDB(), transactionID, addressID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTransactionAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionAddress(exec boil.Executor, transactionID uint64, addressID uint64, selectCols ...string) (*TransactionAddress, error) {
	transactionAddressObj := &TransactionAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `transaction_address` where `transaction_id`=? AND `address_id`=?", sel,
	)

	q := queries.Raw(query, transactionID, addressID)

	err := q.Bind(nil, exec, transactionAddressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from transaction_address")
	}

	return transactionAddressObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TransactionAddress) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TransactionAddress) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *TransactionAddress) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionAddress) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transaction_address provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transactionAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionAddressInsertCacheMut.RLock()
	cache, cached := transactionAddressInsertCache[key]
	transactionAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionAddressAllColumns,
			transactionAddressColumnsWithDefault,
			transactionAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `transaction_address` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `transaction_address` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `transaction_address` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into transaction_address")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransactionID,
		o.AddressID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transaction_address")
	}

CacheNoHooks:
	if !cached {
		transactionAddressInsertCacheMut.Lock()
		transactionAddressInsertCache[key] = cache
		transactionAddressInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single TransactionAddress record using the global executor.
// See Update for more documentation.
func (o *TransactionAddress) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the TransactionAddress, and panics on error.
// See Update for more documentation.
func (o *TransactionAddress) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single TransactionAddress record using the global executor. Panics on error.
// See Update for more documentation.
func (o *TransactionAddress) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the TransactionAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionAddress) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	transactionAddressUpdateCacheMut.RLock()
	cache, cached := transactionAddressUpdateCache[key]
	transactionAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionAddressAllColumns,
			transactionAddressPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update transaction_address, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `transaction_address` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, append(wl, transactionAddressPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update transaction_address row")
	}

	if !cached {
		transactionAddressUpdateCacheMut.Lock()
		transactionAddressUpdateCache[key] = cache
		transactionAddressUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q transactionAddressQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q transactionAddressQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q transactionAddressQuery) UpdateAllGP(cols M) {
	err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q transactionAddressQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for transaction_address")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransactionAddressSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TransactionAddressSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TransactionAddressSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionAddressSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `transaction_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionAddressPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in transactionAddress slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TransactionAddress) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *TransactionAddress) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TransactionAddress) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLTransactionAddressUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionAddress) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transaction_address provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionAddressColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTransactionAddressUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionAddressUpsertCacheMut.RLock()
	cache, cached := transactionAddressUpsertCache[key]
	transactionAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionAddressAllColumns,
			transactionAddressColumnsWithDefault,
			transactionAddressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactionAddressAllColumns,
			transactionAddressPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert transaction_address, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`transaction_address`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `transaction_address` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for transaction_address")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for transaction_address")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transaction_address")
	}

CacheNoHooks:
	if !cached {
		transactionAddressUpsertCacheMut.Lock()
		transactionAddressUpsertCache[key] = cache
		transactionAddressUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single TransactionAddress record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TransactionAddress) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single TransactionAddress record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TransactionAddress) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single TransactionAddress record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TransactionAddress) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single TransactionAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionAddress) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no TransactionAddress provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionAddressPrimaryKeyMapping)
	sql := "DELETE FROM `transaction_address` WHERE `transaction_id`=? AND `address_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from transaction_address")
	}

	return nil
}

func (q transactionAddressQuery) DeleteAllG() error {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q transactionAddressQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows, and panics on error.
func (q transactionAddressQuery) DeleteAllGP() {
	err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q transactionAddressQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no transactionAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from transaction_address")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o TransactionAddressSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TransactionAddressSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TransactionAddressSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionAddressSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `transaction_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionAddressPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from transactionAddress slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TransactionAddress) ReloadG() error {
	if o == nil {
		return errors.New("model: no TransactionAddress provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TransactionAddress) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *TransactionAddress) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionAddress) Reload(exec boil.Executor) error {
	ret, err := FindTransactionAddress(exec, o.TransactionID, o.AddressID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionAddressSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty TransactionAddressSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionAddressSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionAddressSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionAddressSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `transaction_address`.* FROM `transaction_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TransactionAddressSlice")
	}

	*o = slice

	return nil
}

// TransactionAddressExistsG checks if the TransactionAddress row exists.
func TransactionAddressExistsG(transactionID uint64, addressID uint64) (bool, error) {
	return TransactionAddressExists(boil.GetDB(), transactionID, addressID)
}

// TransactionAddressExistsP checks if the TransactionAddress row exists. Panics on error.
func TransactionAddressExistsP(exec boil.Executor, transactionID uint64, addressID uint64) bool {
	e, err := TransactionAddressExists(exec, transactionID, addressID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TransactionAddressExistsGP checks if the TransactionAddress row exists. Panics on error.
func TransactionAddressExistsGP(transactionID uint64, addressID uint64) bool {
	e, err := TransactionAddressExists(boil.GetDB(), transactionID, addressID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TransactionAddressExists checks if the TransactionAddress row exists.
func TransactionAddressExists(exec boil.Executor, transactionID uint64, addressID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `transaction_address` where `transaction_id`=? AND `address_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, transactionID, addressID)
	}
	row := exec.QueryRow(sql, transactionID, addressID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if transaction_address exists")
	}

	return exists, nil
}
