// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Output is an object representing the database table.
type Output struct {
	ID                 uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TransactionID      uint64      `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	Value              null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	Vout               null.Uint   `boil:"vout" json:"vout,omitempty" toml:"vout" yaml:"vout,omitempty"`
	Type               null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	ScriptPubKeyAsm    null.String `boil:"script_pub_key_asm" json:"script_pub_key_asm,omitempty" toml:"script_pub_key_asm" yaml:"script_pub_key_asm,omitempty"`
	ScriptPubKeyHex    null.String `boil:"script_pub_key_hex" json:"script_pub_key_hex,omitempty" toml:"script_pub_key_hex" yaml:"script_pub_key_hex,omitempty"`
	RequiredSignatures null.Uint   `boil:"required_signatures" json:"required_signatures,omitempty" toml:"required_signatures" yaml:"required_signatures,omitempty"`
	Hash160            null.String `boil:"hash160" json:"hash160,omitempty" toml:"hash160" yaml:"hash160,omitempty"`
	AddressList        null.String `boil:"address_list" json:"address_list,omitempty" toml:"address_list" yaml:"address_list,omitempty"`
	IsSpent            bool        `boil:"is_spent" json:"is_spent" toml:"is_spent" yaml:"is_spent"`
	SpentByInputID     null.Uint64 `boil:"spent_by_input_id" json:"spent_by_input_id,omitempty" toml:"spent_by_input_id" yaml:"spent_by_input_id,omitempty"`
	Created            time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified           time.Time   `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *outputR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L outputL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OutputColumns = struct {
	ID                 string
	TransactionID      string
	Value              string
	Vout               string
	Type               string
	ScriptPubKeyAsm    string
	ScriptPubKeyHex    string
	RequiredSignatures string
	Hash160            string
	AddressList        string
	IsSpent            string
	SpentByInputID     string
	Created            string
	Modified           string
}{
	ID:                 "id",
	TransactionID:      "transaction_id",
	Value:              "value",
	Vout:               "vout",
	Type:               "type",
	ScriptPubKeyAsm:    "script_pub_key_asm",
	ScriptPubKeyHex:    "script_pub_key_hex",
	RequiredSignatures: "required_signatures",
	Hash160:            "hash160",
	AddressList:        "address_list",
	IsSpent:            "is_spent",
	SpentByInputID:     "spent_by_input_id",
	Created:            "created",
	Modified:           "modified",
}

// outputR is where relationships are stored.
type outputR struct {
	Transaction  *Transaction
	SpentByInput *Input
	Addresses    AddressSlice
}

// outputL is where Load methods for each relationship are stored.
type outputL struct{}

var (
	outputColumns               = []string{"id", "transaction_id", "value", "vout", "type", "script_pub_key_asm", "script_pub_key_hex", "required_signatures", "hash160", "address_list", "is_spent", "spent_by_input_id", "created", "modified"}
	outputColumnsWithoutDefault = []string{"transaction_id", "value", "vout", "type", "script_pub_key_asm", "script_pub_key_hex", "required_signatures", "hash160", "address_list", "spent_by_input_id"}
	outputColumnsWithDefault    = []string{"id", "is_spent", "created", "modified"}
	outputPrimaryKeyColumns     = []string{"id"}
)

type (
	// OutputSlice is an alias for a slice of pointers to Output.
	// This should generally be used opposed to []Output.
	OutputSlice []*Output

	outputQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	outputType                 = reflect.TypeOf(&Output{})
	outputMapping              = queries.MakeStructMapping(outputType)
	outputPrimaryKeyMapping, _ = queries.BindMapping(outputType, outputMapping, outputPrimaryKeyColumns)
	outputInsertCacheMut       sync.RWMutex
	outputInsertCache          = make(map[string]insertCache)
	outputUpdateCacheMut       sync.RWMutex
	outputUpdateCache          = make(map[string]updateCache)
	outputUpsertCacheMut       sync.RWMutex
	outputUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single output record from the query, and panics on error.
func (q outputQuery) OneP() *Output {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single output record from the query.
func (q outputQuery) One() (*Output, error) {
	o := &Output{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for outputs")
	}

	return o, nil
}

// AllP returns all Output records from the query, and panics on error.
func (q outputQuery) AllP() OutputSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Output records from the query.
func (q outputQuery) All() (OutputSlice, error) {
	var o []*Output

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Output slice")
	}

	return o, nil
}

// CountP returns the count of all Output records in the query, and panics on error.
func (q outputQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Output records in the query.
func (q outputQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count outputs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q outputQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q outputQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if outputs exists")
	}

	return count > 0, nil
}

// TransactionG pointed to by the foreign key.
func (o *Output) TransactionG(mods ...qm.QueryMod) transactionQuery {
	return o.Transaction(boil.GetDB(), mods...)
}

// Transaction pointed to by the foreign key.
func (o *Output) Transaction(exec boil.Executor, mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(exec, queryMods...)
	queries.SetFrom(query.Query, "`transactions`")

	return query
}

// SpentByInputG pointed to by the foreign key.
func (o *Output) SpentByInputG(mods ...qm.QueryMod) inputQuery {
	return o.SpentByInput(boil.GetDB(), mods...)
}

// SpentByInput pointed to by the foreign key.
func (o *Output) SpentByInput(exec boil.Executor, mods ...qm.QueryMod) inputQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SpentByInputID),
	}

	queryMods = append(queryMods, mods...)

	query := Inputs(exec, queryMods...)
	queries.SetFrom(query.Query, "`inputs`")

	return query
}

// AddressesG retrieves all the address's addresses.
func (o *Output) AddressesG(mods ...qm.QueryMod) addressQuery {
	return o.Addresses(boil.GetDB(), mods...)
}

// Addresses retrieves all the address's addresses with an executor.
func (o *Output) Addresses(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`output_addresses` on `addresses`.`id` = `output_addresses`.`address_id`"),
		qm.Where("`output_addresses`.`output_id`=?", o.ID),
	)

	query := Addresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`addresses`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`addresses`.*"})
	}

	return query
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (outputL) LoadTransaction(e boil.Executor, singular bool, maybeOutput interface{}) error {
	var slice []*Output
	var object *Output

	count := 1
	if singular {
		object = maybeOutput.(*Output)
	} else {
		slice = *maybeOutput.(*[]*Output)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &outputR{}
		}
		args[0] = object.TransactionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &outputR{}
			}
			args[i] = obj.TransactionID
		}
	}

	query := fmt.Sprintf(
		"select * from `transactions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}
	defer results.Close()

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Transaction = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.Transaction = foreign
				break
			}
		}
	}

	return nil
}

// LoadSpentByInput allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (outputL) LoadSpentByInput(e boil.Executor, singular bool, maybeOutput interface{}) error {
	var slice []*Output
	var object *Output

	count := 1
	if singular {
		object = maybeOutput.(*Output)
	} else {
		slice = *maybeOutput.(*[]*Output)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &outputR{}
		}
		args[0] = object.SpentByInputID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &outputR{}
			}
			args[i] = obj.SpentByInputID
		}
	}

	query := fmt.Sprintf(
		"select * from `inputs` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Input")
	}
	defer results.Close()

	var resultSlice []*Input
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Input")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SpentByInput = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SpentByInputID.Uint64 == foreign.ID {
				local.R.SpentByInput = foreign
				break
			}
		}
	}

	return nil
}

// LoadAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (outputL) LoadAddresses(e boil.Executor, singular bool, maybeOutput interface{}) error {
	var slice []*Output
	var object *Output

	count := 1
	if singular {
		object = maybeOutput.(*Output)
	} else {
		slice = *maybeOutput.(*[]*Output)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &outputR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &outputR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select `a`.*, `b`.`output_id` from `addresses` as `a` inner join `output_addresses` as `b` on `a`.`id` = `b`.`address_id` where `b`.`output_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load addresses")
	}
	defer results.Close()

	var resultSlice []*Address

	var localJoinCols []uint64
	for results.Next() {
		one := new(Address)
		var localJoinCol uint64

		err = results.Scan(&one.ID, &one.Address, &one.FirstSeen, &one.TotalReceived, &one.TotalSent, &one.Balance, &one.Tag, &one.TagURL, &one.Created, &one.Modified, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice addresses")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice addresses")
	}

	if singular {
		object.R.Addresses = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Addresses = append(local.R.Addresses, foreign)
				break
			}
		}
	}

	return nil
}

// SetTransactionG of the output to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.Outputs.
// Uses the global database handle.
func (o *Output) SetTransactionG(insert bool, related *Transaction) error {
	return o.SetTransaction(boil.GetDB(), insert, related)
}

// SetTransactionP of the output to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.Outputs.
// Panics on error.
func (o *Output) SetTransactionP(exec boil.Executor, insert bool, related *Transaction) {
	if err := o.SetTransaction(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionGP of the output to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.Outputs.
// Uses the global database handle and panics on error.
func (o *Output) SetTransactionGP(insert bool, related *Transaction) {
	if err := o.SetTransaction(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransaction of the output to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.Outputs.
func (o *Output) SetTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `outputs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
		strmangle.WhereClause("`", "`", 0, outputPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.ID

	if o.R == nil {
		o.R = &outputR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			Outputs: OutputSlice{o},
		}
	} else {
		related.R.Outputs = append(related.R.Outputs, o)
	}

	return nil
}

// SetSpentByInputG of the output to the related item.
// Sets o.R.SpentByInput to related.
// Adds o to related.R.SpentByInputOutputs.
// Uses the global database handle.
func (o *Output) SetSpentByInputG(insert bool, related *Input) error {
	return o.SetSpentByInput(boil.GetDB(), insert, related)
}

// SetSpentByInputP of the output to the related item.
// Sets o.R.SpentByInput to related.
// Adds o to related.R.SpentByInputOutputs.
// Panics on error.
func (o *Output) SetSpentByInputP(exec boil.Executor, insert bool, related *Input) {
	if err := o.SetSpentByInput(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSpentByInputGP of the output to the related item.
// Sets o.R.SpentByInput to related.
// Adds o to related.R.SpentByInputOutputs.
// Uses the global database handle and panics on error.
func (o *Output) SetSpentByInputGP(insert bool, related *Input) {
	if err := o.SetSpentByInput(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSpentByInput of the output to the related item.
// Sets o.R.SpentByInput to related.
// Adds o to related.R.SpentByInputOutputs.
func (o *Output) SetSpentByInput(exec boil.Executor, insert bool, related *Input) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `outputs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"spent_by_input_id"}),
		strmangle.WhereClause("`", "`", 0, outputPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SpentByInputID.Uint64 = related.ID
	o.SpentByInputID.Valid = true

	if o.R == nil {
		o.R = &outputR{
			SpentByInput: related,
		}
	} else {
		o.R.SpentByInput = related
	}

	if related.R == nil {
		related.R = &inputR{
			SpentByInputOutputs: OutputSlice{o},
		}
	} else {
		related.R.SpentByInputOutputs = append(related.R.SpentByInputOutputs, o)
	}

	return nil
}

// RemoveSpentByInputG relationship.
// Sets o.R.SpentByInput to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Output) RemoveSpentByInputG(related *Input) error {
	return o.RemoveSpentByInput(boil.GetDB(), related)
}

// RemoveSpentByInputP relationship.
// Sets o.R.SpentByInput to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Output) RemoveSpentByInputP(exec boil.Executor, related *Input) {
	if err := o.RemoveSpentByInput(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveSpentByInputGP relationship.
// Sets o.R.SpentByInput to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Output) RemoveSpentByInputGP(related *Input) {
	if err := o.RemoveSpentByInput(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveSpentByInput relationship.
// Sets o.R.SpentByInput to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Output) RemoveSpentByInput(exec boil.Executor, related *Input) error {
	var err error

	o.SpentByInputID.Valid = false
	if err = o.Update(exec, "spent_by_input_id"); err != nil {
		o.SpentByInputID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.SpentByInput = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SpentByInputOutputs {
		if o.SpentByInputID.Uint64 != ri.SpentByInputID.Uint64 {
			continue
		}

		ln := len(related.R.SpentByInputOutputs)
		if ln > 1 && i < ln-1 {
			related.R.SpentByInputOutputs[i] = related.R.SpentByInputOutputs[ln-1]
		}
		related.R.SpentByInputOutputs = related.R.SpentByInputOutputs[:ln-1]
		break
	}
	return nil
}

// AddAddressesG adds the given related objects to the existing relationships
// of the output, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Outputs appropriately.
// Uses the global database handle.
func (o *Output) AddAddressesG(insert bool, related ...*Address) error {
	return o.AddAddresses(boil.GetDB(), insert, related...)
}

// AddAddressesP adds the given related objects to the existing relationships
// of the output, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Outputs appropriately.
// Panics on error.
func (o *Output) AddAddressesP(exec boil.Executor, insert bool, related ...*Address) {
	if err := o.AddAddresses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAddressesGP adds the given related objects to the existing relationships
// of the output, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Outputs appropriately.
// Uses the global database handle and panics on error.
func (o *Output) AddAddressesGP(insert bool, related ...*Address) {
	if err := o.AddAddresses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAddresses adds the given related objects to the existing relationships
// of the output, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Outputs appropriately.
func (o *Output) AddAddresses(exec boil.Executor, insert bool, related ...*Address) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `output_addresses` (`output_id`, `address_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &outputR{
			Addresses: related,
		}
	} else {
		o.R.Addresses = append(o.R.Addresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &addressR{
				Outputs: OutputSlice{o},
			}
		} else {
			rel.R.Outputs = append(rel.R.Outputs, o)
		}
	}
	return nil
}

// SetAddressesG removes all previously related items of the
// output replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Outputs's Addresses accordingly.
// Replaces o.R.Addresses with related.
// Sets related.R.Outputs's Addresses accordingly.
// Uses the global database handle.
func (o *Output) SetAddressesG(insert bool, related ...*Address) error {
	return o.SetAddresses(boil.GetDB(), insert, related...)
}

// SetAddressesP removes all previously related items of the
// output replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Outputs's Addresses accordingly.
// Replaces o.R.Addresses with related.
// Sets related.R.Outputs's Addresses accordingly.
// Panics on error.
func (o *Output) SetAddressesP(exec boil.Executor, insert bool, related ...*Address) {
	if err := o.SetAddresses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressesGP removes all previously related items of the
// output replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Outputs's Addresses accordingly.
// Replaces o.R.Addresses with related.
// Sets related.R.Outputs's Addresses accordingly.
// Uses the global database handle and panics on error.
func (o *Output) SetAddressesGP(insert bool, related ...*Address) {
	if err := o.SetAddresses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddresses removes all previously related items of the
// output replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Outputs's Addresses accordingly.
// Replaces o.R.Addresses with related.
// Sets related.R.Outputs's Addresses accordingly.
func (o *Output) SetAddresses(exec boil.Executor, insert bool, related ...*Address) error {
	query := "delete from `output_addresses` where `output_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAddressesFromOutputsSlice(o, related)
	if o.R != nil {
		o.R.Addresses = nil
	}
	return o.AddAddresses(exec, insert, related...)
}

// RemoveAddressesG relationships from objects passed in.
// Removes related items from R.Addresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Outputs.
// Uses the global database handle.
func (o *Output) RemoveAddressesG(related ...*Address) error {
	return o.RemoveAddresses(boil.GetDB(), related...)
}

// RemoveAddressesP relationships from objects passed in.
// Removes related items from R.Addresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Outputs.
// Panics on error.
func (o *Output) RemoveAddressesP(exec boil.Executor, related ...*Address) {
	if err := o.RemoveAddresses(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAddressesGP relationships from objects passed in.
// Removes related items from R.Addresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Outputs.
// Uses the global database handle and panics on error.
func (o *Output) RemoveAddressesGP(related ...*Address) {
	if err := o.RemoveAddresses(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAddresses relationships from objects passed in.
// Removes related items from R.Addresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Outputs.
func (o *Output) RemoveAddresses(exec boil.Executor, related ...*Address) error {
	var err error
	query := fmt.Sprintf(
		"delete from `output_addresses` where `output_id` = ? and `address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAddressesFromOutputsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Addresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.Addresses)
			if ln > 1 && i < ln-1 {
				o.R.Addresses[i] = o.R.Addresses[ln-1]
			}
			o.R.Addresses = o.R.Addresses[:ln-1]
			break
		}
	}

	return nil
}

func removeAddressesFromOutputsSlice(o *Output, related []*Address) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Outputs {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Outputs)
			if ln > 1 && i < ln-1 {
				rel.R.Outputs[i] = rel.R.Outputs[ln-1]
			}
			rel.R.Outputs = rel.R.Outputs[:ln-1]
			break
		}
	}
}

// OutputsG retrieves all records.
func OutputsG(mods ...qm.QueryMod) outputQuery {
	return Outputs(boil.GetDB(), mods...)
}

// Outputs retrieves all the records using an executor.
func Outputs(exec boil.Executor, mods ...qm.QueryMod) outputQuery {
	mods = append(mods, qm.From("`outputs`"))
	return outputQuery{NewQuery(exec, mods...)}
}

// FindOutputG retrieves a single record by ID.
func FindOutputG(id uint64, selectCols ...string) (*Output, error) {
	return FindOutput(boil.GetDB(), id, selectCols...)
}

// FindOutputGP retrieves a single record by ID, and panics on error.
func FindOutputGP(id uint64, selectCols ...string) *Output {
	retobj, err := FindOutput(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindOutput retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOutput(exec boil.Executor, id uint64, selectCols ...string) (*Output, error) {
	outputObj := &Output{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `outputs` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(outputObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from outputs")
	}

	return outputObj, nil
}

// FindOutputP retrieves a single record by ID with an executor, and panics on error.
func FindOutputP(exec boil.Executor, id uint64, selectCols ...string) *Output {
	retobj, err := FindOutput(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Output) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Output) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Output) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Output) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no outputs provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(outputColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	outputInsertCacheMut.RLock()
	cache, cached := outputInsertCache[key]
	outputInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			outputColumns,
			outputColumnsWithDefault,
			outputColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(outputType, outputMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(outputType, outputMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `outputs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `outputs` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `outputs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, outputPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into outputs")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == outputMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for outputs")
	}

CacheNoHooks:
	if !cached {
		outputInsertCacheMut.Lock()
		outputInsertCache[key] = cache
		outputInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Output record. See Update for
// whitelist behavior description.
func (o *Output) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Output record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Output) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Output, and panics on error.
// See Update for whitelist behavior description.
func (o *Output) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Output.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Output) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	outputUpdateCacheMut.RLock()
	cache, cached := outputUpdateCache[key]
	outputUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			outputColumns,
			outputPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update outputs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `outputs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, outputPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(outputType, outputMapping, append(wl, outputPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update outputs row")
	}

	if !cached {
		outputUpdateCacheMut.Lock()
		outputUpdateCache[key] = cache
		outputUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q outputQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q outputQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for outputs")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OutputSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o OutputSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o OutputSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OutputSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `outputs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in output slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Output) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Output) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Output) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Output) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no outputs provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(outputColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	outputUpsertCacheMut.RLock()
	cache, cached := outputUpsertCache[key]
	outputUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			outputColumns,
			outputColumnsWithDefault,
			outputColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			outputColumns,
			outputPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert outputs, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "outputs", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `outputs` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(outputType, outputMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(outputType, outputMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for outputs")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == outputMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for outputs")
	}

CacheNoHooks:
	if !cached {
		outputUpsertCacheMut.Lock()
		outputUpsertCache[key] = cache
		outputUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Output record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Output) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Output record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Output) DeleteG() error {
	if o == nil {
		return errors.New("model: no Output provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Output record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Output) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Output record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Output) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Output provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), outputPrimaryKeyMapping)
	sql := "DELETE FROM `outputs` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from outputs")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q outputQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q outputQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no outputQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from outputs")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o OutputSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o OutputSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no Output slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o OutputSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OutputSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Output slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `outputs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from output slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Output) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Output) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Output) ReloadG() error {
	if o == nil {
		return errors.New("model: no Output provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Output) Reload(exec boil.Executor) error {
	ret, err := FindOutput(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OutputSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OutputSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutputSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty OutputSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutputSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	outputs := OutputSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `outputs`.* FROM `outputs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&outputs)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in OutputSlice")
	}

	*o = outputs

	return nil
}

// OutputExists checks if the Output row exists.
func OutputExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `outputs` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if outputs exists")
	}

	return exists, nil
}

// OutputExistsG checks if the Output row exists.
func OutputExistsG(id uint64) (bool, error) {
	return OutputExists(boil.GetDB(), id)
}

// OutputExistsGP checks if the Output row exists. Panics on error.
func OutputExistsGP(id uint64) bool {
	e, err := OutputExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// OutputExistsP checks if the Output row exists. Panics on error.
func OutputExistsP(exec boil.Executor, id uint64) bool {
	e, err := OutputExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
