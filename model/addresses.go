// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Address is an object representing the database table.
type Address struct {
	ID            uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Address       string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	FirstSeen     null.Time   `boil:"first_seen" json:"first_seen,omitempty" toml:"first_seen" yaml:"first_seen,omitempty"`
	TotalReceived string      `boil:"total_received" json:"total_received" toml:"total_received" yaml:"total_received"`
	TotalSent     string      `boil:"total_sent" json:"total_sent" toml:"total_sent" yaml:"total_sent"`
	Balance       null.String `boil:"balance" json:"balance,omitempty" toml:"balance" yaml:"balance,omitempty"`
	Tag           string      `boil:"tag" json:"tag" toml:"tag" yaml:"tag"`
	TagURL        null.String `boil:"tag_url" json:"tag_url,omitempty" toml:"tag_url" yaml:"tag_url,omitempty"`
	Created       time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified      time.Time   `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *addressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L addressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AddressColumns = struct {
	ID            string
	Address       string
	FirstSeen     string
	TotalReceived string
	TotalSent     string
	Balance       string
	Tag           string
	TagURL        string
	Created       string
	Modified      string
}{
	ID:            "id",
	Address:       "address",
	FirstSeen:     "first_seen",
	TotalReceived: "total_received",
	TotalSent:     "total_sent",
	Balance:       "balance",
	Tag:           "tag",
	TagURL:        "tag_url",
	Created:       "created",
	Modified:      "modified",
}

// addressR is where relationships are stored.
type addressR struct {
	Inputs               InputSlice
	InputAddressInputs   InputSlice
	Outputs              OutputSlice
	TransactionAddresses TransactionAddressSlice
}

// addressL is where Load methods for each relationship are stored.
type addressL struct{}

var (
	addressColumns               = []string{"id", "address", "first_seen", "total_received", "total_sent", "balance", "tag", "tag_url", "created", "modified"}
	addressColumnsWithoutDefault = []string{"address", "first_seen", "balance", "tag", "tag_url"}
	addressColumnsWithDefault    = []string{"id", "total_received", "total_sent", "created", "modified"}
	addressPrimaryKeyColumns     = []string{"id"}
)

type (
	// AddressSlice is an alias for a slice of pointers to Address.
	// This should generally be used opposed to []Address.
	AddressSlice []*Address

	addressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	addressType                 = reflect.TypeOf(&Address{})
	addressMapping              = queries.MakeStructMapping(addressType)
	addressPrimaryKeyMapping, _ = queries.BindMapping(addressType, addressMapping, addressPrimaryKeyColumns)
	addressInsertCacheMut       sync.RWMutex
	addressInsertCache          = make(map[string]insertCache)
	addressUpdateCacheMut       sync.RWMutex
	addressUpdateCache          = make(map[string]updateCache)
	addressUpsertCacheMut       sync.RWMutex
	addressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single address record from the query, and panics on error.
func (q addressQuery) OneP() *Address {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single address record from the query.
func (q addressQuery) One() (*Address, error) {
	o := &Address{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for addresses")
	}

	return o, nil
}

// AllP returns all Address records from the query, and panics on error.
func (q addressQuery) AllP() AddressSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Address records from the query.
func (q addressQuery) All() (AddressSlice, error) {
	var o []*Address

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Address slice")
	}

	return o, nil
}

// CountP returns the count of all Address records in the query, and panics on error.
func (q addressQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Address records in the query.
func (q addressQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q addressQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q addressQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if addresses exists")
	}

	return count > 0, nil
}

// InputsG retrieves all the input's inputs.
func (o *Address) InputsG(mods ...qm.QueryMod) inputQuery {
	return o.Inputs(boil.GetDB(), mods...)
}

// Inputs retrieves all the input's inputs with an executor.
func (o *Address) Inputs(exec boil.Executor, mods ...qm.QueryMod) inputQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`input_addresses` on `inputs`.`id` = `input_addresses`.`input_id`"),
		qm.Where("`input_addresses`.`address_id`=?", o.ID),
	)

	query := Inputs(exec, queryMods...)
	queries.SetFrom(query.Query, "`inputs`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`inputs`.*"})
	}

	return query
}

// InputAddressInputsG retrieves all the input's inputs via input_address_id column.
func (o *Address) InputAddressInputsG(mods ...qm.QueryMod) inputQuery {
	return o.InputAddressInputs(boil.GetDB(), mods...)
}

// InputAddressInputs retrieves all the input's inputs with an executor via input_address_id column.
func (o *Address) InputAddressInputs(exec boil.Executor, mods ...qm.QueryMod) inputQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`inputs`.`input_address_id`=?", o.ID),
	)

	query := Inputs(exec, queryMods...)
	queries.SetFrom(query.Query, "`inputs`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`inputs`.*"})
	}

	return query
}

// OutputsG retrieves all the output's outputs.
func (o *Address) OutputsG(mods ...qm.QueryMod) outputQuery {
	return o.Outputs(boil.GetDB(), mods...)
}

// Outputs retrieves all the output's outputs with an executor.
func (o *Address) Outputs(exec boil.Executor, mods ...qm.QueryMod) outputQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`output_addresses` on `outputs`.`id` = `output_addresses`.`output_id`"),
		qm.Where("`output_addresses`.`address_id`=?", o.ID),
	)

	query := Outputs(exec, queryMods...)
	queries.SetFrom(query.Query, "`outputs`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`outputs`.*"})
	}

	return query
}

// TransactionAddressesG retrieves all the transaction_address's transaction addresses.
func (o *Address) TransactionAddressesG(mods ...qm.QueryMod) transactionAddressQuery {
	return o.TransactionAddresses(boil.GetDB(), mods...)
}

// TransactionAddresses retrieves all the transaction_address's transaction addresses with an executor.
func (o *Address) TransactionAddresses(exec boil.Executor, mods ...qm.QueryMod) transactionAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`transaction_addresses`.`address_id`=?", o.ID),
	)

	query := TransactionAddresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`transaction_addresses`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`transaction_addresses`.*"})
	}

	return query
}

// LoadInputs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (addressL) LoadInputs(e boil.Executor, singular bool, maybeAddress interface{}) error {
	var slice []*Address
	var object *Address

	count := 1
	if singular {
		object = maybeAddress.(*Address)
	} else {
		slice = *maybeAddress.(*[]*Address)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select `a`.*, `b`.`address_id` from `inputs` as `a` inner join `input_addresses` as `b` on `a`.`id` = `b`.`input_id` where `b`.`address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load inputs")
	}
	defer results.Close()

	var resultSlice []*Input

	var localJoinCols []uint64
	for results.Next() {
		one := new(Input)
		var localJoinCol uint64

		err = results.Scan(&one.ID, &one.TransactionID, &one.TransactionHash, &one.InputAddressID, &one.IsCoinbase, &one.Coinbase, &one.PrevoutHash, &one.PrevoutN, &one.PrevoutSpendUpdated, &one.Sequence, &one.Value, &one.ScriptSigAsm, &one.ScriptSigHex, &one.Created, &one.Modified, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice inputs")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice inputs")
	}

	if singular {
		object.R.Inputs = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Inputs = append(local.R.Inputs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInputAddressInputs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (addressL) LoadInputAddressInputs(e boil.Executor, singular bool, maybeAddress interface{}) error {
	var slice []*Address
	var object *Address

	count := 1
	if singular {
		object = maybeAddress.(*Address)
	} else {
		slice = *maybeAddress.(*[]*Address)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `inputs` where `input_address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load inputs")
	}
	defer results.Close()

	var resultSlice []*Input
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice inputs")
	}

	if singular {
		object.R.InputAddressInputs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InputAddressID.Uint64 {
				local.R.InputAddressInputs = append(local.R.InputAddressInputs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOutputs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (addressL) LoadOutputs(e boil.Executor, singular bool, maybeAddress interface{}) error {
	var slice []*Address
	var object *Address

	count := 1
	if singular {
		object = maybeAddress.(*Address)
	} else {
		slice = *maybeAddress.(*[]*Address)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select `a`.*, `b`.`address_id` from `outputs` as `a` inner join `output_addresses` as `b` on `a`.`id` = `b`.`output_id` where `b`.`address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load outputs")
	}
	defer results.Close()

	var resultSlice []*Output

	var localJoinCols []uint64
	for results.Next() {
		one := new(Output)
		var localJoinCol uint64

		err = results.Scan(&one.ID, &one.TransactionID, &one.Value, &one.Vout, &one.Type, &one.ScriptPubKeyAsm, &one.ScriptPubKeyHex, &one.RequiredSignatures, &one.Hash160, &one.AddressList, &one.IsSpent, &one.SpentByInputID, &one.Created, &one.Modified, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice outputs")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice outputs")
	}

	if singular {
		object.R.Outputs = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Outputs = append(local.R.Outputs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTransactionAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (addressL) LoadTransactionAddresses(e boil.Executor, singular bool, maybeAddress interface{}) error {
	var slice []*Address
	var object *Address

	count := 1
	if singular {
		object = maybeAddress.(*Address)
	} else {
		slice = *maybeAddress.(*[]*Address)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `transaction_addresses` where `address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transaction_addresses")
	}
	defer results.Close()

	var resultSlice []*TransactionAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transaction_addresses")
	}

	if singular {
		object.R.TransactionAddresses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AddressID {
				local.R.TransactionAddresses = append(local.R.TransactionAddresses, foreign)
				break
			}
		}
	}

	return nil
}

// AddInputsG adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Addresses appropriately.
// Uses the global database handle.
func (o *Address) AddInputsG(insert bool, related ...*Input) error {
	return o.AddInputs(boil.GetDB(), insert, related...)
}

// AddInputsP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Addresses appropriately.
// Panics on error.
func (o *Address) AddInputsP(exec boil.Executor, insert bool, related ...*Input) {
	if err := o.AddInputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInputsGP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Addresses appropriately.
// Uses the global database handle and panics on error.
func (o *Address) AddInputsGP(insert bool, related ...*Input) {
	if err := o.AddInputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInputs adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Addresses appropriately.
func (o *Address) AddInputs(exec boil.Executor, insert bool, related ...*Input) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `input_addresses` (`address_id`, `input_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &addressR{
			Inputs: related,
		}
	} else {
		o.R.Inputs = append(o.R.Inputs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inputR{
				Addresses: AddressSlice{o},
			}
		} else {
			rel.R.Addresses = append(rel.R.Addresses, o)
		}
	}
	return nil
}

// SetInputsG removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Addresses's Inputs accordingly.
// Replaces o.R.Inputs with related.
// Sets related.R.Addresses's Inputs accordingly.
// Uses the global database handle.
func (o *Address) SetInputsG(insert bool, related ...*Input) error {
	return o.SetInputs(boil.GetDB(), insert, related...)
}

// SetInputsP removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Addresses's Inputs accordingly.
// Replaces o.R.Inputs with related.
// Sets related.R.Addresses's Inputs accordingly.
// Panics on error.
func (o *Address) SetInputsP(exec boil.Executor, insert bool, related ...*Input) {
	if err := o.SetInputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInputsGP removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Addresses's Inputs accordingly.
// Replaces o.R.Inputs with related.
// Sets related.R.Addresses's Inputs accordingly.
// Uses the global database handle and panics on error.
func (o *Address) SetInputsGP(insert bool, related ...*Input) {
	if err := o.SetInputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInputs removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Addresses's Inputs accordingly.
// Replaces o.R.Inputs with related.
// Sets related.R.Addresses's Inputs accordingly.
func (o *Address) SetInputs(exec boil.Executor, insert bool, related ...*Input) error {
	query := "delete from `input_addresses` where `address_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeInputsFromAddressesSlice(o, related)
	if o.R != nil {
		o.R.Inputs = nil
	}
	return o.AddInputs(exec, insert, related...)
}

// RemoveInputsG relationships from objects passed in.
// Removes related items from R.Inputs (uses pointer comparison, removal does not keep order)
// Sets related.R.Addresses.
// Uses the global database handle.
func (o *Address) RemoveInputsG(related ...*Input) error {
	return o.RemoveInputs(boil.GetDB(), related...)
}

// RemoveInputsP relationships from objects passed in.
// Removes related items from R.Inputs (uses pointer comparison, removal does not keep order)
// Sets related.R.Addresses.
// Panics on error.
func (o *Address) RemoveInputsP(exec boil.Executor, related ...*Input) {
	if err := o.RemoveInputs(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveInputsGP relationships from objects passed in.
// Removes related items from R.Inputs (uses pointer comparison, removal does not keep order)
// Sets related.R.Addresses.
// Uses the global database handle and panics on error.
func (o *Address) RemoveInputsGP(related ...*Input) {
	if err := o.RemoveInputs(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveInputs relationships from objects passed in.
// Removes related items from R.Inputs (uses pointer comparison, removal does not keep order)
// Sets related.R.Addresses.
func (o *Address) RemoveInputs(exec boil.Executor, related ...*Input) error {
	var err error
	query := fmt.Sprintf(
		"delete from `input_addresses` where `address_id` = ? and `input_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeInputsFromAddressesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Inputs {
			if rel != ri {
				continue
			}

			ln := len(o.R.Inputs)
			if ln > 1 && i < ln-1 {
				o.R.Inputs[i] = o.R.Inputs[ln-1]
			}
			o.R.Inputs = o.R.Inputs[:ln-1]
			break
		}
	}

	return nil
}

func removeInputsFromAddressesSlice(o *Address, related []*Input) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Addresses {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Addresses)
			if ln > 1 && i < ln-1 {
				rel.R.Addresses[i] = rel.R.Addresses[ln-1]
			}
			rel.R.Addresses = rel.R.Addresses[:ln-1]
			break
		}
	}
}

// AddInputAddressInputsG adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.InputAddressInputs.
// Sets related.R.InputAddress appropriately.
// Uses the global database handle.
func (o *Address) AddInputAddressInputsG(insert bool, related ...*Input) error {
	return o.AddInputAddressInputs(boil.GetDB(), insert, related...)
}

// AddInputAddressInputsP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.InputAddressInputs.
// Sets related.R.InputAddress appropriately.
// Panics on error.
func (o *Address) AddInputAddressInputsP(exec boil.Executor, insert bool, related ...*Input) {
	if err := o.AddInputAddressInputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInputAddressInputsGP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.InputAddressInputs.
// Sets related.R.InputAddress appropriately.
// Uses the global database handle and panics on error.
func (o *Address) AddInputAddressInputsGP(insert bool, related ...*Input) {
	if err := o.AddInputAddressInputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInputAddressInputs adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.InputAddressInputs.
// Sets related.R.InputAddress appropriately.
func (o *Address) AddInputAddressInputs(exec boil.Executor, insert bool, related ...*Input) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InputAddressID.Uint64 = o.ID
			rel.InputAddressID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `inputs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"input_address_id"}),
				strmangle.WhereClause("`", "`", 0, inputPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InputAddressID.Uint64 = o.ID
			rel.InputAddressID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &addressR{
			InputAddressInputs: related,
		}
	} else {
		o.R.InputAddressInputs = append(o.R.InputAddressInputs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inputR{
				InputAddress: o,
			}
		} else {
			rel.R.InputAddress = o
		}
	}
	return nil
}

// SetInputAddressInputsG removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InputAddress's InputAddressInputs accordingly.
// Replaces o.R.InputAddressInputs with related.
// Sets related.R.InputAddress's InputAddressInputs accordingly.
// Uses the global database handle.
func (o *Address) SetInputAddressInputsG(insert bool, related ...*Input) error {
	return o.SetInputAddressInputs(boil.GetDB(), insert, related...)
}

// SetInputAddressInputsP removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InputAddress's InputAddressInputs accordingly.
// Replaces o.R.InputAddressInputs with related.
// Sets related.R.InputAddress's InputAddressInputs accordingly.
// Panics on error.
func (o *Address) SetInputAddressInputsP(exec boil.Executor, insert bool, related ...*Input) {
	if err := o.SetInputAddressInputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInputAddressInputsGP removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InputAddress's InputAddressInputs accordingly.
// Replaces o.R.InputAddressInputs with related.
// Sets related.R.InputAddress's InputAddressInputs accordingly.
// Uses the global database handle and panics on error.
func (o *Address) SetInputAddressInputsGP(insert bool, related ...*Input) {
	if err := o.SetInputAddressInputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInputAddressInputs removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InputAddress's InputAddressInputs accordingly.
// Replaces o.R.InputAddressInputs with related.
// Sets related.R.InputAddress's InputAddressInputs accordingly.
func (o *Address) SetInputAddressInputs(exec boil.Executor, insert bool, related ...*Input) error {
	query := "update `inputs` set `input_address_id` = null where `input_address_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.InputAddressInputs {
			rel.InputAddressID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.InputAddress = nil
		}

		o.R.InputAddressInputs = nil
	}
	return o.AddInputAddressInputs(exec, insert, related...)
}

// RemoveInputAddressInputsG relationships from objects passed in.
// Removes related items from R.InputAddressInputs (uses pointer comparison, removal does not keep order)
// Sets related.R.InputAddress.
// Uses the global database handle.
func (o *Address) RemoveInputAddressInputsG(related ...*Input) error {
	return o.RemoveInputAddressInputs(boil.GetDB(), related...)
}

// RemoveInputAddressInputsP relationships from objects passed in.
// Removes related items from R.InputAddressInputs (uses pointer comparison, removal does not keep order)
// Sets related.R.InputAddress.
// Panics on error.
func (o *Address) RemoveInputAddressInputsP(exec boil.Executor, related ...*Input) {
	if err := o.RemoveInputAddressInputs(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveInputAddressInputsGP relationships from objects passed in.
// Removes related items from R.InputAddressInputs (uses pointer comparison, removal does not keep order)
// Sets related.R.InputAddress.
// Uses the global database handle and panics on error.
func (o *Address) RemoveInputAddressInputsGP(related ...*Input) {
	if err := o.RemoveInputAddressInputs(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveInputAddressInputs relationships from objects passed in.
// Removes related items from R.InputAddressInputs (uses pointer comparison, removal does not keep order)
// Sets related.R.InputAddress.
func (o *Address) RemoveInputAddressInputs(exec boil.Executor, related ...*Input) error {
	var err error
	for _, rel := range related {
		rel.InputAddressID.Valid = false
		if rel.R != nil {
			rel.R.InputAddress = nil
		}
		if err = rel.Update(exec, "input_address_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InputAddressInputs {
			if rel != ri {
				continue
			}

			ln := len(o.R.InputAddressInputs)
			if ln > 1 && i < ln-1 {
				o.R.InputAddressInputs[i] = o.R.InputAddressInputs[ln-1]
			}
			o.R.InputAddressInputs = o.R.InputAddressInputs[:ln-1]
			break
		}
	}

	return nil
}

// AddOutputsG adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Addresses appropriately.
// Uses the global database handle.
func (o *Address) AddOutputsG(insert bool, related ...*Output) error {
	return o.AddOutputs(boil.GetDB(), insert, related...)
}

// AddOutputsP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Addresses appropriately.
// Panics on error.
func (o *Address) AddOutputsP(exec boil.Executor, insert bool, related ...*Output) {
	if err := o.AddOutputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOutputsGP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Addresses appropriately.
// Uses the global database handle and panics on error.
func (o *Address) AddOutputsGP(insert bool, related ...*Output) {
	if err := o.AddOutputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOutputs adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Addresses appropriately.
func (o *Address) AddOutputs(exec boil.Executor, insert bool, related ...*Output) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `output_addresses` (`address_id`, `output_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &addressR{
			Outputs: related,
		}
	} else {
		o.R.Outputs = append(o.R.Outputs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &outputR{
				Addresses: AddressSlice{o},
			}
		} else {
			rel.R.Addresses = append(rel.R.Addresses, o)
		}
	}
	return nil
}

// SetOutputsG removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Addresses's Outputs accordingly.
// Replaces o.R.Outputs with related.
// Sets related.R.Addresses's Outputs accordingly.
// Uses the global database handle.
func (o *Address) SetOutputsG(insert bool, related ...*Output) error {
	return o.SetOutputs(boil.GetDB(), insert, related...)
}

// SetOutputsP removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Addresses's Outputs accordingly.
// Replaces o.R.Outputs with related.
// Sets related.R.Addresses's Outputs accordingly.
// Panics on error.
func (o *Address) SetOutputsP(exec boil.Executor, insert bool, related ...*Output) {
	if err := o.SetOutputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOutputsGP removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Addresses's Outputs accordingly.
// Replaces o.R.Outputs with related.
// Sets related.R.Addresses's Outputs accordingly.
// Uses the global database handle and panics on error.
func (o *Address) SetOutputsGP(insert bool, related ...*Output) {
	if err := o.SetOutputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOutputs removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Addresses's Outputs accordingly.
// Replaces o.R.Outputs with related.
// Sets related.R.Addresses's Outputs accordingly.
func (o *Address) SetOutputs(exec boil.Executor, insert bool, related ...*Output) error {
	query := "delete from `output_addresses` where `address_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeOutputsFromAddressesSlice(o, related)
	if o.R != nil {
		o.R.Outputs = nil
	}
	return o.AddOutputs(exec, insert, related...)
}

// RemoveOutputsG relationships from objects passed in.
// Removes related items from R.Outputs (uses pointer comparison, removal does not keep order)
// Sets related.R.Addresses.
// Uses the global database handle.
func (o *Address) RemoveOutputsG(related ...*Output) error {
	return o.RemoveOutputs(boil.GetDB(), related...)
}

// RemoveOutputsP relationships from objects passed in.
// Removes related items from R.Outputs (uses pointer comparison, removal does not keep order)
// Sets related.R.Addresses.
// Panics on error.
func (o *Address) RemoveOutputsP(exec boil.Executor, related ...*Output) {
	if err := o.RemoveOutputs(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOutputsGP relationships from objects passed in.
// Removes related items from R.Outputs (uses pointer comparison, removal does not keep order)
// Sets related.R.Addresses.
// Uses the global database handle and panics on error.
func (o *Address) RemoveOutputsGP(related ...*Output) {
	if err := o.RemoveOutputs(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOutputs relationships from objects passed in.
// Removes related items from R.Outputs (uses pointer comparison, removal does not keep order)
// Sets related.R.Addresses.
func (o *Address) RemoveOutputs(exec boil.Executor, related ...*Output) error {
	var err error
	query := fmt.Sprintf(
		"delete from `output_addresses` where `address_id` = ? and `output_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeOutputsFromAddressesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Outputs {
			if rel != ri {
				continue
			}

			ln := len(o.R.Outputs)
			if ln > 1 && i < ln-1 {
				o.R.Outputs[i] = o.R.Outputs[ln-1]
			}
			o.R.Outputs = o.R.Outputs[:ln-1]
			break
		}
	}

	return nil
}

func removeOutputsFromAddressesSlice(o *Address, related []*Output) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Addresses {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Addresses)
			if ln > 1 && i < ln-1 {
				rel.R.Addresses[i] = rel.R.Addresses[ln-1]
			}
			rel.R.Addresses = rel.R.Addresses[:ln-1]
			break
		}
	}
}

// AddTransactionAddressesG adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Address appropriately.
// Uses the global database handle.
func (o *Address) AddTransactionAddressesG(insert bool, related ...*TransactionAddress) error {
	return o.AddTransactionAddresses(boil.GetDB(), insert, related...)
}

// AddTransactionAddressesP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Address appropriately.
// Panics on error.
func (o *Address) AddTransactionAddressesP(exec boil.Executor, insert bool, related ...*TransactionAddress) {
	if err := o.AddTransactionAddresses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionAddressesGP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Address appropriately.
// Uses the global database handle and panics on error.
func (o *Address) AddTransactionAddressesGP(insert bool, related ...*TransactionAddress) {
	if err := o.AddTransactionAddresses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionAddresses adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Address appropriately.
func (o *Address) AddTransactionAddresses(exec boil.Executor, insert bool, related ...*TransactionAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `transaction_addresses` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
				strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TransactionID, rel.AddressID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.ID
		}
	}

	if o.R == nil {
		o.R = &addressR{
			TransactionAddresses: related,
		}
	} else {
		o.R.TransactionAddresses = append(o.R.TransactionAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionAddressR{
				Address: o,
			}
		} else {
			rel.R.Address = o
		}
	}
	return nil
}

// AddressesG retrieves all records.
func AddressesG(mods ...qm.QueryMod) addressQuery {
	return Addresses(boil.GetDB(), mods...)
}

// Addresses retrieves all the records using an executor.
func Addresses(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	mods = append(mods, qm.From("`addresses`"))
	return addressQuery{NewQuery(exec, mods...)}
}

// FindAddressG retrieves a single record by ID.
func FindAddressG(id uint64, selectCols ...string) (*Address, error) {
	return FindAddress(boil.GetDB(), id, selectCols...)
}

// FindAddressGP retrieves a single record by ID, and panics on error.
func FindAddressGP(id uint64, selectCols ...string) *Address {
	retobj, err := FindAddress(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAddress(exec boil.Executor, id uint64, selectCols ...string) (*Address, error) {
	addressObj := &Address{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `addresses` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(addressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from addresses")
	}

	return addressObj, nil
}

// FindAddressP retrieves a single record by ID with an executor, and panics on error.
func FindAddressP(exec boil.Executor, id uint64, selectCols ...string) *Address {
	retobj, err := FindAddress(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Address) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Address) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Address) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Address) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no addresses provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(addressColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	addressInsertCacheMut.RLock()
	cache, cached := addressInsertCache[key]
	addressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			addressColumns,
			addressColumnsWithDefault,
			addressColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(addressType, addressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `addresses` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `addresses` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `addresses` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, addressPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into addresses")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == addressMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for addresses")
	}

CacheNoHooks:
	if !cached {
		addressInsertCacheMut.Lock()
		addressInsertCache[key] = cache
		addressInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Address record. See Update for
// whitelist behavior description.
func (o *Address) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Address record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Address) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Address, and panics on error.
// See Update for whitelist behavior description.
func (o *Address) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Address.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Address) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	addressUpdateCacheMut.RLock()
	cache, cached := addressUpdateCache[key]
	addressUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			addressColumns,
			addressPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `addresses` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, addressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, append(wl, addressPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update addresses row")
	}

	if !cached {
		addressUpdateCacheMut.Lock()
		addressUpdateCache[key] = cache
		addressUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q addressQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q addressQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for addresses")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AddressSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AddressSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AddressSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AddressSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `addresses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, addressPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in address slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Address) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Address) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Address) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Address) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no addresses provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(addressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	addressUpsertCacheMut.RLock()
	cache, cached := addressUpsertCache[key]
	addressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			addressColumns,
			addressColumnsWithDefault,
			addressColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			addressColumns,
			addressPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert addresses, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "addresses", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `addresses` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(addressType, addressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for addresses")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == addressMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for addresses")
	}

CacheNoHooks:
	if !cached {
		addressUpsertCacheMut.Lock()
		addressUpsertCache[key] = cache
		addressUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Address record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Address) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Address record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Address) DeleteG() error {
	if o == nil {
		return errors.New("model: no Address provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Address record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Address) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Address record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Address) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Address provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), addressPrimaryKeyMapping)
	sql := "DELETE FROM `addresses` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from addresses")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q addressQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q addressQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no addressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from addresses")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AddressSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AddressSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no Address slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AddressSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AddressSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Address slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `addresses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, addressPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from address slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Address) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Address) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Address) ReloadG() error {
	if o == nil {
		return errors.New("model: no Address provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Address) Reload(exec boil.Executor) error {
	ret, err := FindAddress(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AddressSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AddressSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddressSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty AddressSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddressSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	addresses := AddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `addresses`.* FROM `addresses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, addressPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&addresses)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in AddressSlice")
	}

	*o = addresses

	return nil
}

// AddressExists checks if the Address row exists.
func AddressExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `addresses` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if addresses exists")
	}

	return exists, nil
}

// AddressExistsG checks if the Address row exists.
func AddressExistsG(id uint64) (bool, error) {
	return AddressExists(boil.GetDB(), id)
}

// AddressExistsGP checks if the Address row exists. Panics on error.
func AddressExistsGP(id uint64) bool {
	e, err := AddressExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AddressExistsP checks if the Address row exists. Panics on error.
func AddressExistsP(exec boil.Executor, id uint64) bool {
	e, err := AddressExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
