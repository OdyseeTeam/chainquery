// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Transaction is an object representing the database table.
type Transaction struct {
	ID              uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BlockHashID     null.String `boil:"block_hash_id" json:"block_hash_id,omitempty" toml:"block_hash_id" yaml:"block_hash_id,omitempty"`
	InputCount      uint        `boil:"input_count" json:"input_count" toml:"input_count" yaml:"input_count"`
	OutputCount     uint        `boil:"output_count" json:"output_count" toml:"output_count" yaml:"output_count"`
	Fee             float64     `boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	TransactionTime null.Uint64 `boil:"transaction_time" json:"transaction_time,omitempty" toml:"transaction_time" yaml:"transaction_time,omitempty"`
	TransactionSize uint64      `boil:"transaction_size" json:"transaction_size" toml:"transaction_size" yaml:"transaction_size"`
	Hash            string      `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	Version         int         `boil:"version" json:"version" toml:"version" yaml:"version"`
	LockTime        uint        `boil:"lock_time" json:"lock_time" toml:"lock_time" yaml:"lock_time"`
	Raw             null.String `boil:"raw" json:"raw,omitempty" toml:"raw" yaml:"raw,omitempty"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedAt      time.Time   `boil:"modified_at" json:"modified_at" toml:"modified_at" yaml:"modified_at"`
	CreatedTime     time.Time   `boil:"created_time" json:"created_time" toml:"created_time" yaml:"created_time"`
	Value           float64     `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *transactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionColumns = struct {
	ID              string
	BlockHashID     string
	InputCount      string
	OutputCount     string
	Fee             string
	TransactionTime string
	TransactionSize string
	Hash            string
	Version         string
	LockTime        string
	Raw             string
	CreatedAt       string
	ModifiedAt      string
	CreatedTime     string
	Value           string
}{
	ID:              "id",
	BlockHashID:     "block_hash_id",
	InputCount:      "input_count",
	OutputCount:     "output_count",
	Fee:             "fee",
	TransactionTime: "transaction_time",
	TransactionSize: "transaction_size",
	Hash:            "hash",
	Version:         "version",
	LockTime:        "lock_time",
	Raw:             "raw",
	CreatedAt:       "created_at",
	ModifiedAt:      "modified_at",
	CreatedTime:     "created_time",
	Value:           "value",
}

var TransactionTableColumns = struct {
	ID              string
	BlockHashID     string
	InputCount      string
	OutputCount     string
	Fee             string
	TransactionTime string
	TransactionSize string
	Hash            string
	Version         string
	LockTime        string
	Raw             string
	CreatedAt       string
	ModifiedAt      string
	CreatedTime     string
	Value           string
}{
	ID:              "transaction.id",
	BlockHashID:     "transaction.block_hash_id",
	InputCount:      "transaction.input_count",
	OutputCount:     "transaction.output_count",
	Fee:             "transaction.fee",
	TransactionTime: "transaction.transaction_time",
	TransactionSize: "transaction.transaction_size",
	Hash:            "transaction.hash",
	Version:         "transaction.version",
	LockTime:        "transaction.lock_time",
	Raw:             "transaction.raw",
	CreatedAt:       "transaction.created_at",
	ModifiedAt:      "transaction.modified_at",
	CreatedTime:     "transaction.created_time",
	Value:           "transaction.value",
}

// Generated where

var TransactionWhere = struct {
	ID              whereHelperuint64
	BlockHashID     whereHelpernull_String
	InputCount      whereHelperuint
	OutputCount     whereHelperuint
	Fee             whereHelperfloat64
	TransactionTime whereHelpernull_Uint64
	TransactionSize whereHelperuint64
	Hash            whereHelperstring
	Version         whereHelperint
	LockTime        whereHelperuint
	Raw             whereHelpernull_String
	CreatedAt       whereHelpertime_Time
	ModifiedAt      whereHelpertime_Time
	CreatedTime     whereHelpertime_Time
	Value           whereHelperfloat64
}{
	ID:              whereHelperuint64{field: "`transaction`.`id`"},
	BlockHashID:     whereHelpernull_String{field: "`transaction`.`block_hash_id`"},
	InputCount:      whereHelperuint{field: "`transaction`.`input_count`"},
	OutputCount:     whereHelperuint{field: "`transaction`.`output_count`"},
	Fee:             whereHelperfloat64{field: "`transaction`.`fee`"},
	TransactionTime: whereHelpernull_Uint64{field: "`transaction`.`transaction_time`"},
	TransactionSize: whereHelperuint64{field: "`transaction`.`transaction_size`"},
	Hash:            whereHelperstring{field: "`transaction`.`hash`"},
	Version:         whereHelperint{field: "`transaction`.`version`"},
	LockTime:        whereHelperuint{field: "`transaction`.`lock_time`"},
	Raw:             whereHelpernull_String{field: "`transaction`.`raw`"},
	CreatedAt:       whereHelpertime_Time{field: "`transaction`.`created_at`"},
	ModifiedAt:      whereHelpertime_Time{field: "`transaction`.`modified_at`"},
	CreatedTime:     whereHelpertime_Time{field: "`transaction`.`created_time`"},
	Value:           whereHelperfloat64{field: "`transaction`.`value`"},
}

// TransactionRels is where relationship names are stored.
var TransactionRels = struct {
	BlockHash                  string
	TransactionHashClaims      string
	Inputs                     string
	Outputs                    string
	TransactionByHashPurchases string
	TransactionHashSupports    string
	TransactionAddresses       string
}{
	BlockHash:                  "BlockHash",
	TransactionHashClaims:      "TransactionHashClaims",
	Inputs:                     "Inputs",
	Outputs:                    "Outputs",
	TransactionByHashPurchases: "TransactionByHashPurchases",
	TransactionHashSupports:    "TransactionHashSupports",
	TransactionAddresses:       "TransactionAddresses",
}

// transactionR is where relationships are stored.
type transactionR struct {
	BlockHash                  *Block                  `boil:"BlockHash" json:"BlockHash" toml:"BlockHash" yaml:"BlockHash"`
	TransactionHashClaims      ClaimSlice              `boil:"TransactionHashClaims" json:"TransactionHashClaims" toml:"TransactionHashClaims" yaml:"TransactionHashClaims"`
	Inputs                     InputSlice              `boil:"Inputs" json:"Inputs" toml:"Inputs" yaml:"Inputs"`
	Outputs                    OutputSlice             `boil:"Outputs" json:"Outputs" toml:"Outputs" yaml:"Outputs"`
	TransactionByHashPurchases PurchaseSlice           `boil:"TransactionByHashPurchases" json:"TransactionByHashPurchases" toml:"TransactionByHashPurchases" yaml:"TransactionByHashPurchases"`
	TransactionHashSupports    SupportSlice            `boil:"TransactionHashSupports" json:"TransactionHashSupports" toml:"TransactionHashSupports" yaml:"TransactionHashSupports"`
	TransactionAddresses       TransactionAddressSlice `boil:"TransactionAddresses" json:"TransactionAddresses" toml:"TransactionAddresses" yaml:"TransactionAddresses"`
}

// NewStruct creates a new relationship struct
func (*transactionR) NewStruct() *transactionR {
	return &transactionR{}
}

// transactionL is where Load methods for each relationship are stored.
type transactionL struct{}

var (
	transactionAllColumns            = []string{"id", "block_hash_id", "input_count", "output_count", "fee", "transaction_time", "transaction_size", "hash", "version", "lock_time", "raw", "created_at", "modified_at", "created_time", "value"}
	transactionColumnsWithoutDefault = []string{"block_hash_id", "input_count", "output_count", "transaction_time", "transaction_size", "hash", "version", "lock_time", "raw"}
	transactionColumnsWithDefault    = []string{"id", "fee", "created_at", "modified_at", "created_time", "value"}
	transactionPrimaryKeyColumns     = []string{"id"}
	transactionGeneratedColumns      = []string{}
)

type (
	// TransactionSlice is an alias for a slice of pointers to Transaction.
	// This should almost always be used instead of []Transaction.
	TransactionSlice []*Transaction

	transactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionType                 = reflect.TypeOf(&Transaction{})
	transactionMapping              = queries.MakeStructMapping(transactionType)
	transactionPrimaryKeyMapping, _ = queries.BindMapping(transactionType, transactionMapping, transactionPrimaryKeyColumns)
	transactionInsertCacheMut       sync.RWMutex
	transactionInsertCache          = make(map[string]insertCache)
	transactionUpdateCacheMut       sync.RWMutex
	transactionUpdateCache          = make(map[string]updateCache)
	transactionUpsertCacheMut       sync.RWMutex
	transactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single transaction record from the query using the global executor.
func (q transactionQuery) OneG() (*Transaction, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single transaction record from the query using the global executor, and panics on error.
func (q transactionQuery) OneGP() *Transaction {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single transaction record from the query, and panics on error.
func (q transactionQuery) OneP(exec boil.Executor) *Transaction {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single transaction record from the query.
func (q transactionQuery) One(exec boil.Executor) (*Transaction, error) {
	o := &Transaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for transaction")
	}

	return o, nil
}

// AllG returns all Transaction records from the query using the global executor.
func (q transactionQuery) AllG() (TransactionSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all Transaction records from the query using the global executor, and panics on error.
func (q transactionQuery) AllGP() TransactionSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Transaction records from the query, and panics on error.
func (q transactionQuery) AllP(exec boil.Executor) TransactionSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Transaction records from the query.
func (q transactionQuery) All(exec boil.Executor) (TransactionSlice, error) {
	var o []*Transaction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Transaction slice")
	}

	return o, nil
}

// CountG returns the count of all Transaction records in the query using the global executor
func (q transactionQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all Transaction records in the query using the global executor, and panics on error.
func (q transactionQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Transaction records in the query, and panics on error.
func (q transactionQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Transaction records in the query.
func (q transactionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count transaction rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q transactionQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q transactionQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q transactionQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q transactionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if transaction exists")
	}

	return count > 0, nil
}

// BlockHash pointed to by the foreign key.
func (o *Transaction) BlockHash(mods ...qm.QueryMod) blockQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`hash` = ?", o.BlockHashID),
	}

	queryMods = append(queryMods, mods...)

	return Blocks(queryMods...)
}

// TransactionHashClaims retrieves all the claim's Claims with an executor via transaction_hash_id column.
func (o *Transaction) TransactionHashClaims(mods ...qm.QueryMod) claimQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`claim`.`transaction_hash_id`=?", o.Hash),
	)

	return Claims(queryMods...)
}

// Inputs retrieves all the input's Inputs with an executor.
func (o *Transaction) Inputs(mods ...qm.QueryMod) inputQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`input`.`transaction_id`=?", o.ID),
	)

	return Inputs(queryMods...)
}

// Outputs retrieves all the output's Outputs with an executor.
func (o *Transaction) Outputs(mods ...qm.QueryMod) outputQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`output`.`transaction_id`=?", o.ID),
	)

	return Outputs(queryMods...)
}

// TransactionByHashPurchases retrieves all the purchase's Purchases with an executor via transaction_by_hash_id column.
func (o *Transaction) TransactionByHashPurchases(mods ...qm.QueryMod) purchaseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`purchase`.`transaction_by_hash_id`=?", o.Hash),
	)

	return Purchases(queryMods...)
}

// TransactionHashSupports retrieves all the support's Supports with an executor via transaction_hash_id column.
func (o *Transaction) TransactionHashSupports(mods ...qm.QueryMod) supportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`support`.`transaction_hash_id`=?", o.Hash),
	)

	return Supports(queryMods...)
}

// TransactionAddresses retrieves all the transaction_address's TransactionAddresses with an executor.
func (o *Transaction) TransactionAddresses(mods ...qm.QueryMod) transactionAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`transaction_address`.`transaction_id`=?", o.ID),
	)

	return TransactionAddresses(queryMods...)
}

// LoadBlockHash allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadBlockHash(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		if !queries.IsNil(object.BlockHashID) {
			args = append(args, object.BlockHashID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BlockHashID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BlockHashID) {
				args = append(args, obj.BlockHashID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`block`),
		qm.WhereIn(`block.hash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Block")
	}

	var resultSlice []*Block
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Block")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for block")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for block")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlockHash = foreign
		if foreign.R == nil {
			foreign.R = &blockR{}
		}
		foreign.R.BlockHashTransactions = append(foreign.R.BlockHashTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BlockHashID, foreign.Hash) {
				local.R.BlockHash = foreign
				if foreign.R == nil {
					foreign.R = &blockR{}
				}
				foreign.R.BlockHashTransactions = append(foreign.R.BlockHashTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactionHashClaims allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadTransactionHashClaims(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.Hash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Hash) {
					continue Outer
				}
			}

			args = append(args, obj.Hash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`claim`),
		qm.WhereIn(`claim.transaction_hash_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claim")
	}

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claim")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on claim")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claim")
	}

	if singular {
		object.R.TransactionHashClaims = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &claimR{}
			}
			foreign.R.TransactionHash = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Hash, foreign.TransactionHashID) {
				local.R.TransactionHashClaims = append(local.R.TransactionHashClaims, foreign)
				if foreign.R == nil {
					foreign.R = &claimR{}
				}
				foreign.R.TransactionHash = local
				break
			}
		}
	}

	return nil
}

// LoadInputs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadInputs(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`input`),
		qm.WhereIn(`input.transaction_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load input")
	}

	var resultSlice []*Input
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice input")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on input")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for input")
	}

	if singular {
		object.R.Inputs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &inputR{}
			}
			foreign.R.Transaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TransactionID {
				local.R.Inputs = append(local.R.Inputs, foreign)
				if foreign.R == nil {
					foreign.R = &inputR{}
				}
				foreign.R.Transaction = local
				break
			}
		}
	}

	return nil
}

// LoadOutputs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadOutputs(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`output`),
		qm.WhereIn(`output.transaction_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load output")
	}

	var resultSlice []*Output
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice output")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on output")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for output")
	}

	if singular {
		object.R.Outputs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &outputR{}
			}
			foreign.R.Transaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TransactionID {
				local.R.Outputs = append(local.R.Outputs, foreign)
				if foreign.R == nil {
					foreign.R = &outputR{}
				}
				foreign.R.Transaction = local
				break
			}
		}
	}

	return nil
}

// LoadTransactionByHashPurchases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadTransactionByHashPurchases(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.Hash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Hash) {
					continue Outer
				}
			}

			args = append(args, obj.Hash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`purchase`),
		qm.WhereIn(`purchase.transaction_by_hash_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load purchase")
	}

	var resultSlice []*Purchase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice purchase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on purchase")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for purchase")
	}

	if singular {
		object.R.TransactionByHashPurchases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &purchaseR{}
			}
			foreign.R.TransactionByHash = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Hash, foreign.TransactionByHashID) {
				local.R.TransactionByHashPurchases = append(local.R.TransactionByHashPurchases, foreign)
				if foreign.R == nil {
					foreign.R = &purchaseR{}
				}
				foreign.R.TransactionByHash = local
				break
			}
		}
	}

	return nil
}

// LoadTransactionHashSupports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadTransactionHashSupports(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.Hash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Hash) {
					continue Outer
				}
			}

			args = append(args, obj.Hash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`support`),
		qm.WhereIn(`support.transaction_hash_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load support")
	}

	var resultSlice []*Support
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice support")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on support")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for support")
	}

	if singular {
		object.R.TransactionHashSupports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &supportR{}
			}
			foreign.R.TransactionHash = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Hash, foreign.TransactionHashID) {
				local.R.TransactionHashSupports = append(local.R.TransactionHashSupports, foreign)
				if foreign.R == nil {
					foreign.R = &supportR{}
				}
				foreign.R.TransactionHash = local
				break
			}
		}
	}

	return nil
}

// LoadTransactionAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadTransactionAddresses(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transaction_address`),
		qm.WhereIn(`transaction_address.transaction_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transaction_address")
	}

	var resultSlice []*TransactionAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transaction_address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transaction_address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction_address")
	}

	if singular {
		object.R.TransactionAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionAddressR{}
			}
			foreign.R.Transaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TransactionID {
				local.R.TransactionAddresses = append(local.R.TransactionAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &transactionAddressR{}
				}
				foreign.R.Transaction = local
				break
			}
		}
	}

	return nil
}

// SetBlockHashG of the transaction to the related item.
// Sets o.R.BlockHash to related.
// Adds o to related.R.BlockHashTransactions.
// Uses the global database handle.
func (o *Transaction) SetBlockHashG(insert bool, related *Block) error {
	return o.SetBlockHash(boil.GetDB(), insert, related)
}

// SetBlockHashP of the transaction to the related item.
// Sets o.R.BlockHash to related.
// Adds o to related.R.BlockHashTransactions.
// Panics on error.
func (o *Transaction) SetBlockHashP(exec boil.Executor, insert bool, related *Block) {
	if err := o.SetBlockHash(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockHashGP of the transaction to the related item.
// Sets o.R.BlockHash to related.
// Adds o to related.R.BlockHashTransactions.
// Uses the global database handle and panics on error.
func (o *Transaction) SetBlockHashGP(insert bool, related *Block) {
	if err := o.SetBlockHash(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockHash of the transaction to the related item.
// Sets o.R.BlockHash to related.
// Adds o to related.R.BlockHashTransactions.
func (o *Transaction) SetBlockHash(exec boil.Executor, insert bool, related *Block) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transaction` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"block_hash_id"}),
		strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.Hash, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BlockHashID, related.Hash)
	if o.R == nil {
		o.R = &transactionR{
			BlockHash: related,
		}
	} else {
		o.R.BlockHash = related
	}

	if related.R == nil {
		related.R = &blockR{
			BlockHashTransactions: TransactionSlice{o},
		}
	} else {
		related.R.BlockHashTransactions = append(related.R.BlockHashTransactions, o)
	}

	return nil
}

// RemoveBlockHashG relationship.
// Sets o.R.BlockHash to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Transaction) RemoveBlockHashG(related *Block) error {
	return o.RemoveBlockHash(boil.GetDB(), related)
}

// RemoveBlockHashP relationship.
// Sets o.R.BlockHash to nil.
// Removes o from all passed in related items' relationships struct.
// Panics on error.
func (o *Transaction) RemoveBlockHashP(exec boil.Executor, related *Block) {
	if err := o.RemoveBlockHash(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockHashGP relationship.
// Sets o.R.BlockHash to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle and panics on error.
func (o *Transaction) RemoveBlockHashGP(related *Block) {
	if err := o.RemoveBlockHash(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockHash relationship.
// Sets o.R.BlockHash to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Transaction) RemoveBlockHash(exec boil.Executor, related *Block) error {
	var err error

	queries.SetScanner(&o.BlockHashID, nil)
	if err = o.Update(exec, boil.Whitelist("block_hash_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BlockHash = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BlockHashTransactions {
		if queries.Equal(o.BlockHashID, ri.BlockHashID) {
			continue
		}

		ln := len(related.R.BlockHashTransactions)
		if ln > 1 && i < ln-1 {
			related.R.BlockHashTransactions[i] = related.R.BlockHashTransactions[ln-1]
		}
		related.R.BlockHashTransactions = related.R.BlockHashTransactions[:ln-1]
		break
	}
	return nil
}

// AddTransactionHashClaimsG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionHashClaims.
// Sets related.R.TransactionHash appropriately.
// Uses the global database handle.
func (o *Transaction) AddTransactionHashClaimsG(insert bool, related ...*Claim) error {
	return o.AddTransactionHashClaims(boil.GetDB(), insert, related...)
}

// AddTransactionHashClaimsP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionHashClaims.
// Sets related.R.TransactionHash appropriately.
// Panics on error.
func (o *Transaction) AddTransactionHashClaimsP(exec boil.Executor, insert bool, related ...*Claim) {
	if err := o.AddTransactionHashClaims(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionHashClaimsGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionHashClaims.
// Sets related.R.TransactionHash appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddTransactionHashClaimsGP(insert bool, related ...*Claim) {
	if err := o.AddTransactionHashClaims(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionHashClaims adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionHashClaims.
// Sets related.R.TransactionHash appropriately.
func (o *Transaction) AddTransactionHashClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TransactionHashID, o.Hash)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `claim` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_hash_id"}),
				strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
			)
			values := []interface{}{o.Hash, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TransactionHashID, o.Hash)
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransactionHashClaims: related,
		}
	} else {
		o.R.TransactionHashClaims = append(o.R.TransactionHashClaims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimR{
				TransactionHash: o,
			}
		} else {
			rel.R.TransactionHash = o
		}
	}
	return nil
}

// SetTransactionHashClaimsG removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionHash's TransactionHashClaims accordingly.
// Replaces o.R.TransactionHashClaims with related.
// Sets related.R.TransactionHash's TransactionHashClaims accordingly.
// Uses the global database handle.
func (o *Transaction) SetTransactionHashClaimsG(insert bool, related ...*Claim) error {
	return o.SetTransactionHashClaims(boil.GetDB(), insert, related...)
}

// SetTransactionHashClaimsP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionHash's TransactionHashClaims accordingly.
// Replaces o.R.TransactionHashClaims with related.
// Sets related.R.TransactionHash's TransactionHashClaims accordingly.
// Panics on error.
func (o *Transaction) SetTransactionHashClaimsP(exec boil.Executor, insert bool, related ...*Claim) {
	if err := o.SetTransactionHashClaims(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionHashClaimsGP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionHash's TransactionHashClaims accordingly.
// Replaces o.R.TransactionHashClaims with related.
// Sets related.R.TransactionHash's TransactionHashClaims accordingly.
// Uses the global database handle and panics on error.
func (o *Transaction) SetTransactionHashClaimsGP(insert bool, related ...*Claim) {
	if err := o.SetTransactionHashClaims(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionHashClaims removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionHash's TransactionHashClaims accordingly.
// Replaces o.R.TransactionHashClaims with related.
// Sets related.R.TransactionHash's TransactionHashClaims accordingly.
func (o *Transaction) SetTransactionHashClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	query := "update `claim` set `transaction_hash_id` = null where `transaction_hash_id` = ?"
	values := []interface{}{o.Hash}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TransactionHashClaims {
			queries.SetScanner(&rel.TransactionHashID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TransactionHash = nil
		}
		o.R.TransactionHashClaims = nil
	}

	return o.AddTransactionHashClaims(exec, insert, related...)
}

// RemoveTransactionHashClaimsG relationships from objects passed in.
// Removes related items from R.TransactionHashClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionHash.
// Uses the global database handle.
func (o *Transaction) RemoveTransactionHashClaimsG(related ...*Claim) error {
	return o.RemoveTransactionHashClaims(boil.GetDB(), related...)
}

// RemoveTransactionHashClaimsP relationships from objects passed in.
// Removes related items from R.TransactionHashClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionHash.
// Panics on error.
func (o *Transaction) RemoveTransactionHashClaimsP(exec boil.Executor, related ...*Claim) {
	if err := o.RemoveTransactionHashClaims(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionHashClaimsGP relationships from objects passed in.
// Removes related items from R.TransactionHashClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionHash.
// Uses the global database handle and panics on error.
func (o *Transaction) RemoveTransactionHashClaimsGP(related ...*Claim) {
	if err := o.RemoveTransactionHashClaims(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionHashClaims relationships from objects passed in.
// Removes related items from R.TransactionHashClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionHash.
func (o *Transaction) RemoveTransactionHashClaims(exec boil.Executor, related ...*Claim) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TransactionHashID, nil)
		if rel.R != nil {
			rel.R.TransactionHash = nil
		}
		if err = rel.Update(exec, boil.Whitelist("transaction_hash_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TransactionHashClaims {
			if rel != ri {
				continue
			}

			ln := len(o.R.TransactionHashClaims)
			if ln > 1 && i < ln-1 {
				o.R.TransactionHashClaims[i] = o.R.TransactionHashClaims[ln-1]
			}
			o.R.TransactionHashClaims = o.R.TransactionHashClaims[:ln-1]
			break
		}
	}

	return nil
}

// AddInputsG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Transaction appropriately.
// Uses the global database handle.
func (o *Transaction) AddInputsG(insert bool, related ...*Input) error {
	return o.AddInputs(boil.GetDB(), insert, related...)
}

// AddInputsP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Transaction appropriately.
// Panics on error.
func (o *Transaction) AddInputsP(exec boil.Executor, insert bool, related ...*Input) {
	if err := o.AddInputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInputsGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Transaction appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddInputsGP(insert bool, related ...*Input) {
	if err := o.AddInputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInputs adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Transaction appropriately.
func (o *Transaction) AddInputs(exec boil.Executor, insert bool, related ...*Input) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `input` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
				strmangle.WhereClause("`", "`", 0, inputPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			Inputs: related,
		}
	} else {
		o.R.Inputs = append(o.R.Inputs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inputR{
				Transaction: o,
			}
		} else {
			rel.R.Transaction = o
		}
	}
	return nil
}

// AddOutputsG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Transaction appropriately.
// Uses the global database handle.
func (o *Transaction) AddOutputsG(insert bool, related ...*Output) error {
	return o.AddOutputs(boil.GetDB(), insert, related...)
}

// AddOutputsP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Transaction appropriately.
// Panics on error.
func (o *Transaction) AddOutputsP(exec boil.Executor, insert bool, related ...*Output) {
	if err := o.AddOutputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOutputsGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Transaction appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddOutputsGP(insert bool, related ...*Output) {
	if err := o.AddOutputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOutputs adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Transaction appropriately.
func (o *Transaction) AddOutputs(exec boil.Executor, insert bool, related ...*Output) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `output` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
				strmangle.WhereClause("`", "`", 0, outputPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			Outputs: related,
		}
	} else {
		o.R.Outputs = append(o.R.Outputs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &outputR{
				Transaction: o,
			}
		} else {
			rel.R.Transaction = o
		}
	}
	return nil
}

// AddTransactionByHashPurchasesG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionByHashPurchases.
// Sets related.R.TransactionByHash appropriately.
// Uses the global database handle.
func (o *Transaction) AddTransactionByHashPurchasesG(insert bool, related ...*Purchase) error {
	return o.AddTransactionByHashPurchases(boil.GetDB(), insert, related...)
}

// AddTransactionByHashPurchasesP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionByHashPurchases.
// Sets related.R.TransactionByHash appropriately.
// Panics on error.
func (o *Transaction) AddTransactionByHashPurchasesP(exec boil.Executor, insert bool, related ...*Purchase) {
	if err := o.AddTransactionByHashPurchases(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionByHashPurchasesGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionByHashPurchases.
// Sets related.R.TransactionByHash appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddTransactionByHashPurchasesGP(insert bool, related ...*Purchase) {
	if err := o.AddTransactionByHashPurchases(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionByHashPurchases adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionByHashPurchases.
// Sets related.R.TransactionByHash appropriately.
func (o *Transaction) AddTransactionByHashPurchases(exec boil.Executor, insert bool, related ...*Purchase) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TransactionByHashID, o.Hash)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `purchase` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_by_hash_id"}),
				strmangle.WhereClause("`", "`", 0, purchasePrimaryKeyColumns),
			)
			values := []interface{}{o.Hash, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TransactionByHashID, o.Hash)
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransactionByHashPurchases: related,
		}
	} else {
		o.R.TransactionByHashPurchases = append(o.R.TransactionByHashPurchases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &purchaseR{
				TransactionByHash: o,
			}
		} else {
			rel.R.TransactionByHash = o
		}
	}
	return nil
}

// SetTransactionByHashPurchasesG removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionByHash's TransactionByHashPurchases accordingly.
// Replaces o.R.TransactionByHashPurchases with related.
// Sets related.R.TransactionByHash's TransactionByHashPurchases accordingly.
// Uses the global database handle.
func (o *Transaction) SetTransactionByHashPurchasesG(insert bool, related ...*Purchase) error {
	return o.SetTransactionByHashPurchases(boil.GetDB(), insert, related...)
}

// SetTransactionByHashPurchasesP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionByHash's TransactionByHashPurchases accordingly.
// Replaces o.R.TransactionByHashPurchases with related.
// Sets related.R.TransactionByHash's TransactionByHashPurchases accordingly.
// Panics on error.
func (o *Transaction) SetTransactionByHashPurchasesP(exec boil.Executor, insert bool, related ...*Purchase) {
	if err := o.SetTransactionByHashPurchases(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionByHashPurchasesGP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionByHash's TransactionByHashPurchases accordingly.
// Replaces o.R.TransactionByHashPurchases with related.
// Sets related.R.TransactionByHash's TransactionByHashPurchases accordingly.
// Uses the global database handle and panics on error.
func (o *Transaction) SetTransactionByHashPurchasesGP(insert bool, related ...*Purchase) {
	if err := o.SetTransactionByHashPurchases(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionByHashPurchases removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionByHash's TransactionByHashPurchases accordingly.
// Replaces o.R.TransactionByHashPurchases with related.
// Sets related.R.TransactionByHash's TransactionByHashPurchases accordingly.
func (o *Transaction) SetTransactionByHashPurchases(exec boil.Executor, insert bool, related ...*Purchase) error {
	query := "update `purchase` set `transaction_by_hash_id` = null where `transaction_by_hash_id` = ?"
	values := []interface{}{o.Hash}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TransactionByHashPurchases {
			queries.SetScanner(&rel.TransactionByHashID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TransactionByHash = nil
		}
		o.R.TransactionByHashPurchases = nil
	}

	return o.AddTransactionByHashPurchases(exec, insert, related...)
}

// RemoveTransactionByHashPurchasesG relationships from objects passed in.
// Removes related items from R.TransactionByHashPurchases (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionByHash.
// Uses the global database handle.
func (o *Transaction) RemoveTransactionByHashPurchasesG(related ...*Purchase) error {
	return o.RemoveTransactionByHashPurchases(boil.GetDB(), related...)
}

// RemoveTransactionByHashPurchasesP relationships from objects passed in.
// Removes related items from R.TransactionByHashPurchases (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionByHash.
// Panics on error.
func (o *Transaction) RemoveTransactionByHashPurchasesP(exec boil.Executor, related ...*Purchase) {
	if err := o.RemoveTransactionByHashPurchases(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionByHashPurchasesGP relationships from objects passed in.
// Removes related items from R.TransactionByHashPurchases (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionByHash.
// Uses the global database handle and panics on error.
func (o *Transaction) RemoveTransactionByHashPurchasesGP(related ...*Purchase) {
	if err := o.RemoveTransactionByHashPurchases(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionByHashPurchases relationships from objects passed in.
// Removes related items from R.TransactionByHashPurchases (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionByHash.
func (o *Transaction) RemoveTransactionByHashPurchases(exec boil.Executor, related ...*Purchase) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TransactionByHashID, nil)
		if rel.R != nil {
			rel.R.TransactionByHash = nil
		}
		if err = rel.Update(exec, boil.Whitelist("transaction_by_hash_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TransactionByHashPurchases {
			if rel != ri {
				continue
			}

			ln := len(o.R.TransactionByHashPurchases)
			if ln > 1 && i < ln-1 {
				o.R.TransactionByHashPurchases[i] = o.R.TransactionByHashPurchases[ln-1]
			}
			o.R.TransactionByHashPurchases = o.R.TransactionByHashPurchases[:ln-1]
			break
		}
	}

	return nil
}

// AddTransactionHashSupportsG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionHashSupports.
// Sets related.R.TransactionHash appropriately.
// Uses the global database handle.
func (o *Transaction) AddTransactionHashSupportsG(insert bool, related ...*Support) error {
	return o.AddTransactionHashSupports(boil.GetDB(), insert, related...)
}

// AddTransactionHashSupportsP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionHashSupports.
// Sets related.R.TransactionHash appropriately.
// Panics on error.
func (o *Transaction) AddTransactionHashSupportsP(exec boil.Executor, insert bool, related ...*Support) {
	if err := o.AddTransactionHashSupports(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionHashSupportsGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionHashSupports.
// Sets related.R.TransactionHash appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddTransactionHashSupportsGP(insert bool, related ...*Support) {
	if err := o.AddTransactionHashSupports(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionHashSupports adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionHashSupports.
// Sets related.R.TransactionHash appropriately.
func (o *Transaction) AddTransactionHashSupports(exec boil.Executor, insert bool, related ...*Support) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TransactionHashID, o.Hash)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `support` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_hash_id"}),
				strmangle.WhereClause("`", "`", 0, supportPrimaryKeyColumns),
			)
			values := []interface{}{o.Hash, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TransactionHashID, o.Hash)
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransactionHashSupports: related,
		}
	} else {
		o.R.TransactionHashSupports = append(o.R.TransactionHashSupports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &supportR{
				TransactionHash: o,
			}
		} else {
			rel.R.TransactionHash = o
		}
	}
	return nil
}

// SetTransactionHashSupportsG removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionHash's TransactionHashSupports accordingly.
// Replaces o.R.TransactionHashSupports with related.
// Sets related.R.TransactionHash's TransactionHashSupports accordingly.
// Uses the global database handle.
func (o *Transaction) SetTransactionHashSupportsG(insert bool, related ...*Support) error {
	return o.SetTransactionHashSupports(boil.GetDB(), insert, related...)
}

// SetTransactionHashSupportsP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionHash's TransactionHashSupports accordingly.
// Replaces o.R.TransactionHashSupports with related.
// Sets related.R.TransactionHash's TransactionHashSupports accordingly.
// Panics on error.
func (o *Transaction) SetTransactionHashSupportsP(exec boil.Executor, insert bool, related ...*Support) {
	if err := o.SetTransactionHashSupports(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionHashSupportsGP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionHash's TransactionHashSupports accordingly.
// Replaces o.R.TransactionHashSupports with related.
// Sets related.R.TransactionHash's TransactionHashSupports accordingly.
// Uses the global database handle and panics on error.
func (o *Transaction) SetTransactionHashSupportsGP(insert bool, related ...*Support) {
	if err := o.SetTransactionHashSupports(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionHashSupports removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionHash's TransactionHashSupports accordingly.
// Replaces o.R.TransactionHashSupports with related.
// Sets related.R.TransactionHash's TransactionHashSupports accordingly.
func (o *Transaction) SetTransactionHashSupports(exec boil.Executor, insert bool, related ...*Support) error {
	query := "update `support` set `transaction_hash_id` = null where `transaction_hash_id` = ?"
	values := []interface{}{o.Hash}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TransactionHashSupports {
			queries.SetScanner(&rel.TransactionHashID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TransactionHash = nil
		}
		o.R.TransactionHashSupports = nil
	}

	return o.AddTransactionHashSupports(exec, insert, related...)
}

// RemoveTransactionHashSupportsG relationships from objects passed in.
// Removes related items from R.TransactionHashSupports (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionHash.
// Uses the global database handle.
func (o *Transaction) RemoveTransactionHashSupportsG(related ...*Support) error {
	return o.RemoveTransactionHashSupports(boil.GetDB(), related...)
}

// RemoveTransactionHashSupportsP relationships from objects passed in.
// Removes related items from R.TransactionHashSupports (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionHash.
// Panics on error.
func (o *Transaction) RemoveTransactionHashSupportsP(exec boil.Executor, related ...*Support) {
	if err := o.RemoveTransactionHashSupports(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionHashSupportsGP relationships from objects passed in.
// Removes related items from R.TransactionHashSupports (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionHash.
// Uses the global database handle and panics on error.
func (o *Transaction) RemoveTransactionHashSupportsGP(related ...*Support) {
	if err := o.RemoveTransactionHashSupports(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionHashSupports relationships from objects passed in.
// Removes related items from R.TransactionHashSupports (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionHash.
func (o *Transaction) RemoveTransactionHashSupports(exec boil.Executor, related ...*Support) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TransactionHashID, nil)
		if rel.R != nil {
			rel.R.TransactionHash = nil
		}
		if err = rel.Update(exec, boil.Whitelist("transaction_hash_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TransactionHashSupports {
			if rel != ri {
				continue
			}

			ln := len(o.R.TransactionHashSupports)
			if ln > 1 && i < ln-1 {
				o.R.TransactionHashSupports[i] = o.R.TransactionHashSupports[ln-1]
			}
			o.R.TransactionHashSupports = o.R.TransactionHashSupports[:ln-1]
			break
		}
	}

	return nil
}

// AddTransactionAddressesG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Transaction appropriately.
// Uses the global database handle.
func (o *Transaction) AddTransactionAddressesG(insert bool, related ...*TransactionAddress) error {
	return o.AddTransactionAddresses(boil.GetDB(), insert, related...)
}

// AddTransactionAddressesP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Transaction appropriately.
// Panics on error.
func (o *Transaction) AddTransactionAddressesP(exec boil.Executor, insert bool, related ...*TransactionAddress) {
	if err := o.AddTransactionAddresses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionAddressesGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Transaction appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddTransactionAddressesGP(insert bool, related ...*TransactionAddress) {
	if err := o.AddTransactionAddresses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionAddresses adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Transaction appropriately.
func (o *Transaction) AddTransactionAddresses(exec boil.Executor, insert bool, related ...*TransactionAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `transaction_address` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
				strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TransactionID, rel.AddressID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransactionAddresses: related,
		}
	} else {
		o.R.TransactionAddresses = append(o.R.TransactionAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionAddressR{
				Transaction: o,
			}
		} else {
			rel.R.Transaction = o
		}
	}
	return nil
}

// Transactions retrieves all the records using an executor.
func Transactions(mods ...qm.QueryMod) transactionQuery {
	mods = append(mods, qm.From("`transaction`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`transaction`.*"})
	}

	return transactionQuery{q}
}

// FindTransactionG retrieves a single record by ID.
func FindTransactionG(iD uint64, selectCols ...string) (*Transaction, error) {
	return FindTransaction(boil.GetDB(), iD, selectCols...)
}

// FindTransactionP retrieves a single record by ID with an executor, and panics on error.
func FindTransactionP(exec boil.Executor, iD uint64, selectCols ...string) *Transaction {
	retobj, err := FindTransaction(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTransactionGP retrieves a single record by ID, and panics on error.
func FindTransactionGP(iD uint64, selectCols ...string) *Transaction {
	retobj, err := FindTransaction(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransaction(exec boil.Executor, iD uint64, selectCols ...string) (*Transaction, error) {
	transactionObj := &Transaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `transaction` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, transactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from transaction")
	}

	return transactionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Transaction) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Transaction) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Transaction) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Transaction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transaction provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionInsertCacheMut.RLock()
	cache, cached := transactionInsertCache[key]
	transactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionAllColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `transaction` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `transaction` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `transaction` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into transaction")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transactionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transaction")
	}

CacheNoHooks:
	if !cached {
		transactionInsertCacheMut.Lock()
		transactionInsertCache[key] = cache
		transactionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Transaction record using the global executor.
// See Update for more documentation.
func (o *Transaction) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the Transaction, and panics on error.
// See Update for more documentation.
func (o *Transaction) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single Transaction record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Transaction) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Transaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Transaction) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	transactionUpdateCacheMut.RLock()
	cache, cached := transactionUpdateCache[key]
	transactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionAllColumns,
			transactionPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update transaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `transaction` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, append(wl, transactionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update transaction row")
	}

	if !cached {
		transactionUpdateCacheMut.Lock()
		transactionUpdateCache[key] = cache
		transactionUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q transactionQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q transactionQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q transactionQuery) UpdateAllGP(cols M) {
	err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q transactionQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for transaction")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransactionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TransactionSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TransactionSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `transaction` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in transaction slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Transaction) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Transaction) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Transaction) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLTransactionUniqueColumns = []string{
	"id",
	"hash",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Transaction) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transaction provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTransactionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionUpsertCacheMut.RLock()
	cache, cached := transactionUpsertCache[key]
	transactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionAllColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactionAllColumns,
			transactionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert transaction, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`transaction`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `transaction` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for transaction")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transactionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(transactionType, transactionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for transaction")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transaction")
	}

CacheNoHooks:
	if !cached {
		transactionUpsertCacheMut.Lock()
		transactionUpsertCache[key] = cache
		transactionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Transaction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Transaction) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single Transaction record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Transaction) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single Transaction record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Transaction) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Transaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transaction) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Transaction provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionPrimaryKeyMapping)
	sql := "DELETE FROM `transaction` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from transaction")
	}

	return nil
}

func (q transactionQuery) DeleteAllG() error {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q transactionQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows, and panics on error.
func (q transactionQuery) DeleteAllGP() {
	err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q transactionQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no transactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from transaction")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o TransactionSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TransactionSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TransactionSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `transaction` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from transaction slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Transaction) ReloadG() error {
	if o == nil {
		return errors.New("model: no Transaction provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Transaction) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Transaction) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transaction) Reload(exec boil.Executor) error {
	ret, err := FindTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty TransactionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `transaction`.* FROM `transaction` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TransactionSlice")
	}

	*o = slice

	return nil
}

// TransactionExistsG checks if the Transaction row exists.
func TransactionExistsG(iD uint64) (bool, error) {
	return TransactionExists(boil.GetDB(), iD)
}

// TransactionExistsP checks if the Transaction row exists. Panics on error.
func TransactionExistsP(exec boil.Executor, iD uint64) bool {
	e, err := TransactionExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TransactionExistsGP checks if the Transaction row exists. Panics on error.
func TransactionExistsGP(iD uint64) bool {
	e, err := TransactionExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TransactionExists checks if the Transaction row exists.
func TransactionExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `transaction` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if transaction exists")
	}

	return exists, nil
}
