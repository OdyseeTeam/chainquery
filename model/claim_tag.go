// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClaimTag is an object representing the database table.
type ClaimTag struct {
	ID         uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TagID      null.Uint64 `boil:"tag_id" json:"tag_id,omitempty" toml:"tag_id" yaml:"tag_id,omitempty"`
	ClaimID    string      `boil:"claim_id" json:"claim_id" toml:"claim_id" yaml:"claim_id"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedAt time.Time   `boil:"modified_at" json:"modified_at" toml:"modified_at" yaml:"modified_at"`

	R *claimTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L claimTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClaimTagColumns = struct {
	ID         string
	TagID      string
	ClaimID    string
	CreatedAt  string
	ModifiedAt string
}{
	ID:         "id",
	TagID:      "tag_id",
	ClaimID:    "claim_id",
	CreatedAt:  "created_at",
	ModifiedAt: "modified_at",
}

var ClaimTagTableColumns = struct {
	ID         string
	TagID      string
	ClaimID    string
	CreatedAt  string
	ModifiedAt string
}{
	ID:         "claim_tag.id",
	TagID:      "claim_tag.tag_id",
	ClaimID:    "claim_tag.claim_id",
	CreatedAt:  "claim_tag.created_at",
	ModifiedAt: "claim_tag.modified_at",
}

// Generated where

var ClaimTagWhere = struct {
	ID         whereHelperuint64
	TagID      whereHelpernull_Uint64
	ClaimID    whereHelperstring
	CreatedAt  whereHelpertime_Time
	ModifiedAt whereHelpertime_Time
}{
	ID:         whereHelperuint64{field: "`claim_tag`.`id`"},
	TagID:      whereHelpernull_Uint64{field: "`claim_tag`.`tag_id`"},
	ClaimID:    whereHelperstring{field: "`claim_tag`.`claim_id`"},
	CreatedAt:  whereHelpertime_Time{field: "`claim_tag`.`created_at`"},
	ModifiedAt: whereHelpertime_Time{field: "`claim_tag`.`modified_at`"},
}

// ClaimTagRels is where relationship names are stored.
var ClaimTagRels = struct {
	Claim string
	Tag   string
}{
	Claim: "Claim",
	Tag:   "Tag",
}

// claimTagR is where relationships are stored.
type claimTagR struct {
	Claim *Claim `boil:"Claim" json:"Claim" toml:"Claim" yaml:"Claim"`
	Tag   *Tag   `boil:"Tag" json:"Tag" toml:"Tag" yaml:"Tag"`
}

// NewStruct creates a new relationship struct
func (*claimTagR) NewStruct() *claimTagR {
	return &claimTagR{}
}

// claimTagL is where Load methods for each relationship are stored.
type claimTagL struct{}

var (
	claimTagAllColumns            = []string{"id", "tag_id", "claim_id", "created_at", "modified_at"}
	claimTagColumnsWithoutDefault = []string{"tag_id", "claim_id"}
	claimTagColumnsWithDefault    = []string{"id", "created_at", "modified_at"}
	claimTagPrimaryKeyColumns     = []string{"id"}
	claimTagGeneratedColumns      = []string{}
)

type (
	// ClaimTagSlice is an alias for a slice of pointers to ClaimTag.
	// This should almost always be used instead of []ClaimTag.
	ClaimTagSlice []*ClaimTag

	claimTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	claimTagType                 = reflect.TypeOf(&ClaimTag{})
	claimTagMapping              = queries.MakeStructMapping(claimTagType)
	claimTagPrimaryKeyMapping, _ = queries.BindMapping(claimTagType, claimTagMapping, claimTagPrimaryKeyColumns)
	claimTagInsertCacheMut       sync.RWMutex
	claimTagInsertCache          = make(map[string]insertCache)
	claimTagUpdateCacheMut       sync.RWMutex
	claimTagUpdateCache          = make(map[string]updateCache)
	claimTagUpsertCacheMut       sync.RWMutex
	claimTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single claimTag record from the query using the global executor.
func (q claimTagQuery) OneG() (*ClaimTag, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single claimTag record from the query using the global executor, and panics on error.
func (q claimTagQuery) OneGP() *ClaimTag {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single claimTag record from the query, and panics on error.
func (q claimTagQuery) OneP(exec boil.Executor) *ClaimTag {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single claimTag record from the query.
func (q claimTagQuery) One(exec boil.Executor) (*ClaimTag, error) {
	o := &ClaimTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for claim_tag")
	}

	return o, nil
}

// AllG returns all ClaimTag records from the query using the global executor.
func (q claimTagQuery) AllG() (ClaimTagSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all ClaimTag records from the query using the global executor, and panics on error.
func (q claimTagQuery) AllGP() ClaimTagSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all ClaimTag records from the query, and panics on error.
func (q claimTagQuery) AllP(exec boil.Executor) ClaimTagSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ClaimTag records from the query.
func (q claimTagQuery) All(exec boil.Executor) (ClaimTagSlice, error) {
	var o []*ClaimTag

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ClaimTag slice")
	}

	return o, nil
}

// CountG returns the count of all ClaimTag records in the query using the global executor
func (q claimTagQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all ClaimTag records in the query using the global executor, and panics on error.
func (q claimTagQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all ClaimTag records in the query, and panics on error.
func (q claimTagQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ClaimTag records in the query.
func (q claimTagQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count claim_tag rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q claimTagQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q claimTagQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q claimTagQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q claimTagQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if claim_tag exists")
	}

	return count > 0, nil
}

// Claim pointed to by the foreign key.
func (o *ClaimTag) Claim(mods ...qm.QueryMod) claimQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`claim_id` = ?", o.ClaimID),
	}

	queryMods = append(queryMods, mods...)

	return Claims(queryMods...)
}

// Tag pointed to by the foreign key.
func (o *ClaimTag) Tag(mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	return Tags(queryMods...)
}

// LoadClaim allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimTagL) LoadClaim(e boil.Executor, singular bool, maybeClaimTag interface{}, mods queries.Applicator) error {
	var slice []*ClaimTag
	var object *ClaimTag

	if singular {
		object = maybeClaimTag.(*ClaimTag)
	} else {
		slice = *maybeClaimTag.(*[]*ClaimTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimTagR{}
		}
		args = append(args, object.ClaimID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimTagR{}
			}

			for _, a := range args {
				if a == obj.ClaimID {
					continue Outer
				}
			}

			args = append(args, obj.ClaimID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`claim`),
		qm.WhereIn(`claim.claim_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Claim")
	}

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Claim")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for claim")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claim")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Claim = foreign
		if foreign.R == nil {
			foreign.R = &claimR{}
		}
		foreign.R.ClaimTags = append(foreign.R.ClaimTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClaimID == foreign.ClaimID {
				local.R.Claim = foreign
				if foreign.R == nil {
					foreign.R = &claimR{}
				}
				foreign.R.ClaimTags = append(foreign.R.ClaimTags, local)
				break
			}
		}
	}

	return nil
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimTagL) LoadTag(e boil.Executor, singular bool, maybeClaimTag interface{}, mods queries.Applicator) error {
	var slice []*ClaimTag
	var object *ClaimTag

	if singular {
		object = maybeClaimTag.(*ClaimTag)
	} else {
		slice = *maybeClaimTag.(*[]*ClaimTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimTagR{}
		}
		if !queries.IsNil(object.TagID) {
			args = append(args, object.TagID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimTagR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TagID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TagID) {
				args = append(args, obj.TagID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tag`),
		qm.WhereIn(`tag.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &tagR{}
		}
		foreign.R.ClaimTags = append(foreign.R.ClaimTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TagID, foreign.ID) {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.ClaimTags = append(foreign.R.ClaimTags, local)
				break
			}
		}
	}

	return nil
}

// SetClaimG of the claimTag to the related item.
// Sets o.R.Claim to related.
// Adds o to related.R.ClaimTags.
// Uses the global database handle.
func (o *ClaimTag) SetClaimG(insert bool, related *Claim) error {
	return o.SetClaim(boil.GetDB(), insert, related)
}

// SetClaimP of the claimTag to the related item.
// Sets o.R.Claim to related.
// Adds o to related.R.ClaimTags.
// Panics on error.
func (o *ClaimTag) SetClaimP(exec boil.Executor, insert bool, related *Claim) {
	if err := o.SetClaim(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClaimGP of the claimTag to the related item.
// Sets o.R.Claim to related.
// Adds o to related.R.ClaimTags.
// Uses the global database handle and panics on error.
func (o *ClaimTag) SetClaimGP(insert bool, related *Claim) {
	if err := o.SetClaim(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClaim of the claimTag to the related item.
// Sets o.R.Claim to related.
// Adds o to related.R.ClaimTags.
func (o *ClaimTag) SetClaim(exec boil.Executor, insert bool, related *Claim) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `claim_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"claim_id"}),
		strmangle.WhereClause("`", "`", 0, claimTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClaimID = related.ClaimID
	if o.R == nil {
		o.R = &claimTagR{
			Claim: related,
		}
	} else {
		o.R.Claim = related
	}

	if related.R == nil {
		related.R = &claimR{
			ClaimTags: ClaimTagSlice{o},
		}
	} else {
		related.R.ClaimTags = append(related.R.ClaimTags, o)
	}

	return nil
}

// SetTagG of the claimTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.ClaimTags.
// Uses the global database handle.
func (o *ClaimTag) SetTagG(insert bool, related *Tag) error {
	return o.SetTag(boil.GetDB(), insert, related)
}

// SetTagP of the claimTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.ClaimTags.
// Panics on error.
func (o *ClaimTag) SetTagP(exec boil.Executor, insert bool, related *Tag) {
	if err := o.SetTag(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTagGP of the claimTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.ClaimTags.
// Uses the global database handle and panics on error.
func (o *ClaimTag) SetTagGP(insert bool, related *Tag) {
	if err := o.SetTag(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTag of the claimTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.ClaimTags.
func (o *ClaimTag) SetTag(exec boil.Executor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `claim_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tag_id"}),
		strmangle.WhereClause("`", "`", 0, claimTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TagID, related.ID)
	if o.R == nil {
		o.R = &claimTagR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			ClaimTags: ClaimTagSlice{o},
		}
	} else {
		related.R.ClaimTags = append(related.R.ClaimTags, o)
	}

	return nil
}

// RemoveTagG relationship.
// Sets o.R.Tag to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *ClaimTag) RemoveTagG(related *Tag) error {
	return o.RemoveTag(boil.GetDB(), related)
}

// RemoveTagP relationship.
// Sets o.R.Tag to nil.
// Removes o from all passed in related items' relationships struct.
// Panics on error.
func (o *ClaimTag) RemoveTagP(exec boil.Executor, related *Tag) {
	if err := o.RemoveTag(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTagGP relationship.
// Sets o.R.Tag to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle and panics on error.
func (o *ClaimTag) RemoveTagGP(related *Tag) {
	if err := o.RemoveTag(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTag relationship.
// Sets o.R.Tag to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ClaimTag) RemoveTag(exec boil.Executor, related *Tag) error {
	var err error

	queries.SetScanner(&o.TagID, nil)
	if err = o.Update(exec, boil.Whitelist("tag_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Tag = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ClaimTags {
		if queries.Equal(o.TagID, ri.TagID) {
			continue
		}

		ln := len(related.R.ClaimTags)
		if ln > 1 && i < ln-1 {
			related.R.ClaimTags[i] = related.R.ClaimTags[ln-1]
		}
		related.R.ClaimTags = related.R.ClaimTags[:ln-1]
		break
	}
	return nil
}

// ClaimTags retrieves all the records using an executor.
func ClaimTags(mods ...qm.QueryMod) claimTagQuery {
	mods = append(mods, qm.From("`claim_tag`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`claim_tag`.*"})
	}

	return claimTagQuery{q}
}

// FindClaimTagG retrieves a single record by ID.
func FindClaimTagG(iD uint64, selectCols ...string) (*ClaimTag, error) {
	return FindClaimTag(boil.GetDB(), iD, selectCols...)
}

// FindClaimTagP retrieves a single record by ID with an executor, and panics on error.
func FindClaimTagP(exec boil.Executor, iD uint64, selectCols ...string) *ClaimTag {
	retobj, err := FindClaimTag(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindClaimTagGP retrieves a single record by ID, and panics on error.
func FindClaimTagGP(iD uint64, selectCols ...string) *ClaimTag {
	retobj, err := FindClaimTag(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindClaimTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClaimTag(exec boil.Executor, iD uint64, selectCols ...string) (*ClaimTag, error) {
	claimTagObj := &ClaimTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `claim_tag` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, claimTagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from claim_tag")
	}

	return claimTagObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ClaimTag) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ClaimTag) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ClaimTag) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClaimTag) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no claim_tag provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(claimTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	claimTagInsertCacheMut.RLock()
	cache, cached := claimTagInsertCache[key]
	claimTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			claimTagAllColumns,
			claimTagColumnsWithDefault,
			claimTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(claimTagType, claimTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(claimTagType, claimTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `claim_tag` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `claim_tag` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `claim_tag` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, claimTagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into claim_tag")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimTagMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for claim_tag")
	}

CacheNoHooks:
	if !cached {
		claimTagInsertCacheMut.Lock()
		claimTagInsertCache[key] = cache
		claimTagInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ClaimTag record using the global executor.
// See Update for more documentation.
func (o *ClaimTag) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the ClaimTag, and panics on error.
// See Update for more documentation.
func (o *ClaimTag) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single ClaimTag record using the global executor. Panics on error.
// See Update for more documentation.
func (o *ClaimTag) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the ClaimTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClaimTag) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	claimTagUpdateCacheMut.RLock()
	cache, cached := claimTagUpdateCache[key]
	claimTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			claimTagAllColumns,
			claimTagPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update claim_tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `claim_tag` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, claimTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(claimTagType, claimTagMapping, append(wl, claimTagPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update claim_tag row")
	}

	if !cached {
		claimTagUpdateCacheMut.Lock()
		claimTagUpdateCache[key] = cache
		claimTagUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q claimTagQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q claimTagQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q claimTagQuery) UpdateAllGP(cols M) {
	err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q claimTagQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for claim_tag")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ClaimTagSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ClaimTagSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ClaimTagSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClaimTagSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `claim_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimTagPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in claimTag slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ClaimTag) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ClaimTag) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ClaimTag) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLClaimTagUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClaimTag) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no claim_tag provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(claimTagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClaimTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	claimTagUpsertCacheMut.RLock()
	cache, cached := claimTagUpsertCache[key]
	claimTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			claimTagAllColumns,
			claimTagColumnsWithDefault,
			claimTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			claimTagAllColumns,
			claimTagPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert claim_tag, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`claim_tag`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `claim_tag` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(claimTagType, claimTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(claimTagType, claimTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for claim_tag")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimTagMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(claimTagType, claimTagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for claim_tag")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for claim_tag")
	}

CacheNoHooks:
	if !cached {
		claimTagUpsertCacheMut.Lock()
		claimTagUpsertCache[key] = cache
		claimTagUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single ClaimTag record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ClaimTag) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single ClaimTag record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ClaimTag) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single ClaimTag record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ClaimTag) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single ClaimTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClaimTag) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no ClaimTag provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), claimTagPrimaryKeyMapping)
	sql := "DELETE FROM `claim_tag` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from claim_tag")
	}

	return nil
}

func (q claimTagQuery) DeleteAllG() error {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q claimTagQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows, and panics on error.
func (q claimTagQuery) DeleteAllGP() {
	err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q claimTagQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no claimTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from claim_tag")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o ClaimTagSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ClaimTagSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ClaimTagSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClaimTagSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `claim_tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimTagPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from claimTag slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ClaimTag) ReloadG() error {
	if o == nil {
		return errors.New("model: no ClaimTag provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ClaimTag) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ClaimTag) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClaimTag) Reload(exec boil.Executor) error {
	ret, err := FindClaimTag(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimTagSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty ClaimTagSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimTagSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimTagSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimTagSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClaimTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `claim_tag`.* FROM `claim_tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ClaimTagSlice")
	}

	*o = slice

	return nil
}

// ClaimTagExistsG checks if the ClaimTag row exists.
func ClaimTagExistsG(iD uint64) (bool, error) {
	return ClaimTagExists(boil.GetDB(), iD)
}

// ClaimTagExistsP checks if the ClaimTag row exists. Panics on error.
func ClaimTagExistsP(exec boil.Executor, iD uint64) bool {
	e, err := ClaimTagExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ClaimTagExistsGP checks if the ClaimTag row exists. Panics on error.
func ClaimTagExistsGP(iD uint64) bool {
	e, err := ClaimTagExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ClaimTagExists checks if the ClaimTag row exists.
func ClaimTagExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `claim_tag` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if claim_tag exists")
	}

	return exists, nil
}
