// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClaimInList is an object representing the database table.
type ClaimInList struct {
	ID          uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ListClaimID string      `boil:"list_claim_id" json:"list_claim_id" toml:"list_claim_id" yaml:"list_claim_id"`
	ClaimID     null.String `boil:"claim_id" json:"claim_id,omitempty" toml:"claim_id" yaml:"claim_id,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedAt  time.Time   `boil:"modified_at" json:"modified_at" toml:"modified_at" yaml:"modified_at"`

	R *claimInListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L claimInListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClaimInListColumns = struct {
	ID          string
	ListClaimID string
	ClaimID     string
	CreatedAt   string
	ModifiedAt  string
}{
	ID:          "id",
	ListClaimID: "list_claim_id",
	ClaimID:     "claim_id",
	CreatedAt:   "created_at",
	ModifiedAt:  "modified_at",
}

var ClaimInListTableColumns = struct {
	ID          string
	ListClaimID string
	ClaimID     string
	CreatedAt   string
	ModifiedAt  string
}{
	ID:          "claim_in_list.id",
	ListClaimID: "claim_in_list.list_claim_id",
	ClaimID:     "claim_in_list.claim_id",
	CreatedAt:   "claim_in_list.created_at",
	ModifiedAt:  "claim_in_list.modified_at",
}

// Generated where

var ClaimInListWhere = struct {
	ID          whereHelperuint64
	ListClaimID whereHelperstring
	ClaimID     whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	ModifiedAt  whereHelpertime_Time
}{
	ID:          whereHelperuint64{field: "`claim_in_list`.`id`"},
	ListClaimID: whereHelperstring{field: "`claim_in_list`.`list_claim_id`"},
	ClaimID:     whereHelpernull_String{field: "`claim_in_list`.`claim_id`"},
	CreatedAt:   whereHelpertime_Time{field: "`claim_in_list`.`created_at`"},
	ModifiedAt:  whereHelpertime_Time{field: "`claim_in_list`.`modified_at`"},
}

// ClaimInListRels is where relationship names are stored.
var ClaimInListRels = struct {
	ListClaim string
}{
	ListClaim: "ListClaim",
}

// claimInListR is where relationships are stored.
type claimInListR struct {
	ListClaim *Claim `boil:"ListClaim" json:"ListClaim" toml:"ListClaim" yaml:"ListClaim"`
}

// NewStruct creates a new relationship struct
func (*claimInListR) NewStruct() *claimInListR {
	return &claimInListR{}
}

// claimInListL is where Load methods for each relationship are stored.
type claimInListL struct{}

var (
	claimInListAllColumns            = []string{"id", "list_claim_id", "claim_id", "created_at", "modified_at"}
	claimInListColumnsWithoutDefault = []string{"list_claim_id", "claim_id"}
	claimInListColumnsWithDefault    = []string{"id", "created_at", "modified_at"}
	claimInListPrimaryKeyColumns     = []string{"id"}
	claimInListGeneratedColumns      = []string{}
)

type (
	// ClaimInListSlice is an alias for a slice of pointers to ClaimInList.
	// This should almost always be used instead of []ClaimInList.
	ClaimInListSlice []*ClaimInList

	claimInListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	claimInListType                 = reflect.TypeOf(&ClaimInList{})
	claimInListMapping              = queries.MakeStructMapping(claimInListType)
	claimInListPrimaryKeyMapping, _ = queries.BindMapping(claimInListType, claimInListMapping, claimInListPrimaryKeyColumns)
	claimInListInsertCacheMut       sync.RWMutex
	claimInListInsertCache          = make(map[string]insertCache)
	claimInListUpdateCacheMut       sync.RWMutex
	claimInListUpdateCache          = make(map[string]updateCache)
	claimInListUpsertCacheMut       sync.RWMutex
	claimInListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single claimInList record from the query using the global executor.
func (q claimInListQuery) OneG() (*ClaimInList, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single claimInList record from the query using the global executor, and panics on error.
func (q claimInListQuery) OneGP() *ClaimInList {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single claimInList record from the query, and panics on error.
func (q claimInListQuery) OneP(exec boil.Executor) *ClaimInList {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single claimInList record from the query.
func (q claimInListQuery) One(exec boil.Executor) (*ClaimInList, error) {
	o := &ClaimInList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for claim_in_list")
	}

	return o, nil
}

// AllG returns all ClaimInList records from the query using the global executor.
func (q claimInListQuery) AllG() (ClaimInListSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all ClaimInList records from the query using the global executor, and panics on error.
func (q claimInListQuery) AllGP() ClaimInListSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all ClaimInList records from the query, and panics on error.
func (q claimInListQuery) AllP(exec boil.Executor) ClaimInListSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ClaimInList records from the query.
func (q claimInListQuery) All(exec boil.Executor) (ClaimInListSlice, error) {
	var o []*ClaimInList

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ClaimInList slice")
	}

	return o, nil
}

// CountG returns the count of all ClaimInList records in the query using the global executor
func (q claimInListQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all ClaimInList records in the query using the global executor, and panics on error.
func (q claimInListQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all ClaimInList records in the query, and panics on error.
func (q claimInListQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ClaimInList records in the query.
func (q claimInListQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count claim_in_list rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q claimInListQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q claimInListQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q claimInListQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q claimInListQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if claim_in_list exists")
	}

	return count > 0, nil
}

// ListClaim pointed to by the foreign key.
func (o *ClaimInList) ListClaim(mods ...qm.QueryMod) claimQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`claim_id` = ?", o.ListClaimID),
	}

	queryMods = append(queryMods, mods...)

	return Claims(queryMods...)
}

// LoadListClaim allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimInListL) LoadListClaim(e boil.Executor, singular bool, maybeClaimInList interface{}, mods queries.Applicator) error {
	var slice []*ClaimInList
	var object *ClaimInList

	if singular {
		object = maybeClaimInList.(*ClaimInList)
	} else {
		slice = *maybeClaimInList.(*[]*ClaimInList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimInListR{}
		}
		args = append(args, object.ListClaimID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimInListR{}
			}

			for _, a := range args {
				if a == obj.ListClaimID {
					continue Outer
				}
			}

			args = append(args, obj.ListClaimID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`claim`),
		qm.WhereIn(`claim.claim_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Claim")
	}

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Claim")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for claim")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claim")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ListClaim = foreign
		if foreign.R == nil {
			foreign.R = &claimR{}
		}
		foreign.R.ListClaimClaimInLists = append(foreign.R.ListClaimClaimInLists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ListClaimID == foreign.ClaimID {
				local.R.ListClaim = foreign
				if foreign.R == nil {
					foreign.R = &claimR{}
				}
				foreign.R.ListClaimClaimInLists = append(foreign.R.ListClaimClaimInLists, local)
				break
			}
		}
	}

	return nil
}

// SetListClaimG of the claimInList to the related item.
// Sets o.R.ListClaim to related.
// Adds o to related.R.ListClaimClaimInLists.
// Uses the global database handle.
func (o *ClaimInList) SetListClaimG(insert bool, related *Claim) error {
	return o.SetListClaim(boil.GetDB(), insert, related)
}

// SetListClaimP of the claimInList to the related item.
// Sets o.R.ListClaim to related.
// Adds o to related.R.ListClaimClaimInLists.
// Panics on error.
func (o *ClaimInList) SetListClaimP(exec boil.Executor, insert bool, related *Claim) {
	if err := o.SetListClaim(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetListClaimGP of the claimInList to the related item.
// Sets o.R.ListClaim to related.
// Adds o to related.R.ListClaimClaimInLists.
// Uses the global database handle and panics on error.
func (o *ClaimInList) SetListClaimGP(insert bool, related *Claim) {
	if err := o.SetListClaim(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetListClaim of the claimInList to the related item.
// Sets o.R.ListClaim to related.
// Adds o to related.R.ListClaimClaimInLists.
func (o *ClaimInList) SetListClaim(exec boil.Executor, insert bool, related *Claim) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `claim_in_list` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"list_claim_id"}),
		strmangle.WhereClause("`", "`", 0, claimInListPrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ListClaimID = related.ClaimID
	if o.R == nil {
		o.R = &claimInListR{
			ListClaim: related,
		}
	} else {
		o.R.ListClaim = related
	}

	if related.R == nil {
		related.R = &claimR{
			ListClaimClaimInLists: ClaimInListSlice{o},
		}
	} else {
		related.R.ListClaimClaimInLists = append(related.R.ListClaimClaimInLists, o)
	}

	return nil
}

// ClaimInLists retrieves all the records using an executor.
func ClaimInLists(mods ...qm.QueryMod) claimInListQuery {
	mods = append(mods, qm.From("`claim_in_list`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`claim_in_list`.*"})
	}

	return claimInListQuery{q}
}

// FindClaimInListG retrieves a single record by ID.
func FindClaimInListG(iD uint64, selectCols ...string) (*ClaimInList, error) {
	return FindClaimInList(boil.GetDB(), iD, selectCols...)
}

// FindClaimInListP retrieves a single record by ID with an executor, and panics on error.
func FindClaimInListP(exec boil.Executor, iD uint64, selectCols ...string) *ClaimInList {
	retobj, err := FindClaimInList(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindClaimInListGP retrieves a single record by ID, and panics on error.
func FindClaimInListGP(iD uint64, selectCols ...string) *ClaimInList {
	retobj, err := FindClaimInList(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindClaimInList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClaimInList(exec boil.Executor, iD uint64, selectCols ...string) (*ClaimInList, error) {
	claimInListObj := &ClaimInList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `claim_in_list` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, claimInListObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from claim_in_list")
	}

	return claimInListObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ClaimInList) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ClaimInList) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ClaimInList) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClaimInList) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no claim_in_list provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(claimInListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	claimInListInsertCacheMut.RLock()
	cache, cached := claimInListInsertCache[key]
	claimInListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			claimInListAllColumns,
			claimInListColumnsWithDefault,
			claimInListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(claimInListType, claimInListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(claimInListType, claimInListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `claim_in_list` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `claim_in_list` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `claim_in_list` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, claimInListPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into claim_in_list")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimInListMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for claim_in_list")
	}

CacheNoHooks:
	if !cached {
		claimInListInsertCacheMut.Lock()
		claimInListInsertCache[key] = cache
		claimInListInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ClaimInList record using the global executor.
// See Update for more documentation.
func (o *ClaimInList) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the ClaimInList, and panics on error.
// See Update for more documentation.
func (o *ClaimInList) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single ClaimInList record using the global executor. Panics on error.
// See Update for more documentation.
func (o *ClaimInList) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the ClaimInList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClaimInList) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	claimInListUpdateCacheMut.RLock()
	cache, cached := claimInListUpdateCache[key]
	claimInListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			claimInListAllColumns,
			claimInListPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update claim_in_list, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `claim_in_list` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, claimInListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(claimInListType, claimInListMapping, append(wl, claimInListPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update claim_in_list row")
	}

	if !cached {
		claimInListUpdateCacheMut.Lock()
		claimInListUpdateCache[key] = cache
		claimInListUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q claimInListQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q claimInListQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q claimInListQuery) UpdateAllGP(cols M) {
	err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q claimInListQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for claim_in_list")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ClaimInListSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ClaimInListSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ClaimInListSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClaimInListSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimInListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `claim_in_list` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimInListPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in claimInList slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ClaimInList) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ClaimInList) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ClaimInList) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLClaimInListUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClaimInList) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no claim_in_list provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(claimInListColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClaimInListUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	claimInListUpsertCacheMut.RLock()
	cache, cached := claimInListUpsertCache[key]
	claimInListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			claimInListAllColumns,
			claimInListColumnsWithDefault,
			claimInListColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			claimInListAllColumns,
			claimInListPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert claim_in_list, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`claim_in_list`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `claim_in_list` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(claimInListType, claimInListMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(claimInListType, claimInListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for claim_in_list")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimInListMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(claimInListType, claimInListMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for claim_in_list")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for claim_in_list")
	}

CacheNoHooks:
	if !cached {
		claimInListUpsertCacheMut.Lock()
		claimInListUpsertCache[key] = cache
		claimInListUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single ClaimInList record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ClaimInList) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single ClaimInList record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ClaimInList) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single ClaimInList record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ClaimInList) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single ClaimInList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClaimInList) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no ClaimInList provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), claimInListPrimaryKeyMapping)
	sql := "DELETE FROM `claim_in_list` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from claim_in_list")
	}

	return nil
}

func (q claimInListQuery) DeleteAllG() error {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q claimInListQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows, and panics on error.
func (q claimInListQuery) DeleteAllGP() {
	err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q claimInListQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no claimInListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from claim_in_list")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o ClaimInListSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ClaimInListSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ClaimInListSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClaimInListSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimInListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `claim_in_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimInListPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from claimInList slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ClaimInList) ReloadG() error {
	if o == nil {
		return errors.New("model: no ClaimInList provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ClaimInList) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ClaimInList) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClaimInList) Reload(exec boil.Executor) error {
	ret, err := FindClaimInList(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimInListSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty ClaimInListSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimInListSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimInListSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimInListSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClaimInListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimInListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `claim_in_list`.* FROM `claim_in_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimInListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ClaimInListSlice")
	}

	*o = slice

	return nil
}

// ClaimInListExistsG checks if the ClaimInList row exists.
func ClaimInListExistsG(iD uint64) (bool, error) {
	return ClaimInListExists(boil.GetDB(), iD)
}

// ClaimInListExistsP checks if the ClaimInList row exists. Panics on error.
func ClaimInListExistsP(exec boil.Executor, iD uint64) bool {
	e, err := ClaimInListExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ClaimInListExistsGP checks if the ClaimInList row exists. Panics on error.
func ClaimInListExistsGP(iD uint64) bool {
	e, err := ClaimInListExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ClaimInListExists checks if the ClaimInList row exists.
func ClaimInListExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `claim_in_list` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if claim_in_list exists")
	}

	return exists, nil
}
