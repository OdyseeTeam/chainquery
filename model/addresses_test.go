// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testAddresses(t *testing.T) {
	t.Parallel()

	query := Addresses(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAddressesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = address.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddressesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Addresses(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddressesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AddressSlice{address}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAddressesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AddressExists(tx, address.ID)
	if err != nil {
		t.Errorf("Unable to check if Address exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AddressExistsG to return true, but got false.")
	}
}
func testAddressesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	addressFound, err := FindAddress(tx, address.ID)
	if err != nil {
		t.Error(err)
	}

	if addressFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAddressesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Addresses(tx).Bind(address); err != nil {
		t.Error(err)
	}
}

func testAddressesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Addresses(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAddressesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressOne := &Address{}
	addressTwo := &Address{}
	if err = randomize.Struct(seed, addressOne, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}
	if err = randomize.Struct(seed, addressTwo, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = addressTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Addresses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAddressesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	addressOne := &Address{}
	addressTwo := &Address{}
	if err = randomize.Struct(seed, addressOne, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}
	if err = randomize.Struct(seed, addressTwo, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = addressTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAddressesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddressesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx, addressColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddressToManyInputs(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c Input

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, inputDBTypes, false, inputColumnsWithDefault...)
	randomize.Struct(seed, &c, inputDBTypes, false, inputColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `input_addresses` (`address_id`, `input_id`) values (?, ?)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `input_addresses` (`address_id`, `input_id`) values (?, ?)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	input, err := a.Inputs(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range input {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadInputs(tx, false, (*[]*Address)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Inputs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Inputs = nil
	if err = a.L.LoadInputs(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Inputs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", input)
	}
}

func testAddressToManyInputAddressInputs(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c Input

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, inputDBTypes, false, inputColumnsWithDefault...)
	randomize.Struct(seed, &c, inputDBTypes, false, inputColumnsWithDefault...)

	b.InputAddressID.Valid = true
	c.InputAddressID.Valid = true
	b.InputAddressID.Uint64 = a.ID
	c.InputAddressID.Uint64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	input, err := a.InputAddressInputs(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range input {
		if v.InputAddressID.Uint64 == b.InputAddressID.Uint64 {
			bFound = true
		}
		if v.InputAddressID.Uint64 == c.InputAddressID.Uint64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadInputAddressInputs(tx, false, (*[]*Address)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InputAddressInputs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InputAddressInputs = nil
	if err = a.L.LoadInputAddressInputs(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InputAddressInputs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", input)
	}
}

func testAddressToManyOutputs(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c Output

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, outputDBTypes, false, outputColumnsWithDefault...)
	randomize.Struct(seed, &c, outputDBTypes, false, outputColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `output_addresses` (`address_id`, `output_id`) values (?, ?)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `output_addresses` (`address_id`, `output_id`) values (?, ?)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	output, err := a.Outputs(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range output {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadOutputs(tx, false, (*[]*Address)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Outputs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Outputs = nil
	if err = a.L.LoadOutputs(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Outputs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", output)
	}
}

func testAddressToManyTransactionAddresses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c TransactionAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, transactionAddressDBTypes, false, transactionAddressColumnsWithDefault...)
	randomize.Struct(seed, &c, transactionAddressDBTypes, false, transactionAddressColumnsWithDefault...)

	b.AddressID = a.ID
	c.AddressID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	transactionAddress, err := a.TransactionAddresses(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range transactionAddress {
		if v.AddressID == b.AddressID {
			bFound = true
		}
		if v.AddressID == c.AddressID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadTransactionAddresses(tx, false, (*[]*Address)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TransactionAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TransactionAddresses = nil
	if err = a.L.LoadTransactionAddresses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TransactionAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", transactionAddress)
	}
}

func testAddressToManyAddOpInputs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e Input

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Input{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, inputDBTypes, false, strmangle.SetComplement(inputPrimaryKeyColumns, inputColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Input{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInputs(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Addresses[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Addresses[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Inputs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Inputs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Inputs(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressToManySetOpInputs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e Input

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Input{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, inputDBTypes, false, strmangle.SetComplement(inputPrimaryKeyColumns, inputColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetInputs(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Inputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetInputs(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Inputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Addresses) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Addresses) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Addresses[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Addresses[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Inputs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Inputs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressToManyRemoveOpInputs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e Input

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Input{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, inputDBTypes, false, strmangle.SetComplement(inputPrimaryKeyColumns, inputColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddInputs(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Inputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveInputs(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Inputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Addresses) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Addresses) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Addresses[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Addresses[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Inputs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Inputs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Inputs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressToManyAddOpInputAddressInputs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e Input

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Input{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, inputDBTypes, false, strmangle.SetComplement(inputPrimaryKeyColumns, inputColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Input{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInputAddressInputs(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.InputAddressID.Uint64 {
			t.Error("foreign key was wrong value", a.ID, first.InputAddressID.Uint64)
		}
		if a.ID != second.InputAddressID.Uint64 {
			t.Error("foreign key was wrong value", a.ID, second.InputAddressID.Uint64)
		}

		if first.R.InputAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.InputAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.InputAddressInputs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InputAddressInputs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InputAddressInputs(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressToManySetOpInputAddressInputs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e Input

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Input{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, inputDBTypes, false, strmangle.SetComplement(inputPrimaryKeyColumns, inputColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetInputAddressInputs(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.InputAddressInputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetInputAddressInputs(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.InputAddressInputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.InputAddressID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.InputAddressID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.InputAddressID.Uint64 {
		t.Error("foreign key was wrong value", a.ID, d.InputAddressID.Uint64)
	}
	if a.ID != e.InputAddressID.Uint64 {
		t.Error("foreign key was wrong value", a.ID, e.InputAddressID.Uint64)
	}

	if b.R.InputAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.InputAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.InputAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.InputAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.InputAddressInputs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.InputAddressInputs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressToManyRemoveOpInputAddressInputs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e Input

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Input{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, inputDBTypes, false, strmangle.SetComplement(inputPrimaryKeyColumns, inputColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddInputAddressInputs(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.InputAddressInputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveInputAddressInputs(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.InputAddressInputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.InputAddressID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.InputAddressID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.InputAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.InputAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.InputAddress != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.InputAddress != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.InputAddressInputs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.InputAddressInputs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.InputAddressInputs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressToManyAddOpOutputs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e Output

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Output{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, outputDBTypes, false, strmangle.SetComplement(outputPrimaryKeyColumns, outputColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Output{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOutputs(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Addresses[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Addresses[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Outputs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Outputs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Outputs(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressToManySetOpOutputs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e Output

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Output{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, outputDBTypes, false, strmangle.SetComplement(outputPrimaryKeyColumns, outputColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetOutputs(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Outputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOutputs(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Outputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Addresses) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Addresses) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Addresses[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Addresses[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Outputs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Outputs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressToManyRemoveOpOutputs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e Output

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Output{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, outputDBTypes, false, strmangle.SetComplement(outputPrimaryKeyColumns, outputColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddOutputs(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Outputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOutputs(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Outputs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Addresses) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Addresses) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Addresses[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Addresses[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Outputs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Outputs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Outputs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressToManyAddOpTransactionAddresses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c, d, e TransactionAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TransactionAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionAddressDBTypes, false, strmangle.SetComplement(transactionAddressPrimaryKeyColumns, transactionAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TransactionAddress{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactionAddresses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AddressID {
			t.Error("foreign key was wrong value", a.ID, first.AddressID)
		}
		if a.ID != second.AddressID {
			t.Error("foreign key was wrong value", a.ID, second.AddressID)
		}

		if first.R.Address != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Address != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TransactionAddresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TransactionAddresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TransactionAddresses(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = address.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAddressesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AddressSlice{address}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAddressesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Addresses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	addressDBTypes = map[string]string{`Address`: `varchar`, `Balance`: `decimal`, `Created`: `datetime`, `FirstSeen`: `datetime`, `ID`: `bigint`, `Modified`: `datetime`, `Tag`: `varchar`, `TagURL`: `varchar`, `TotalReceived`: `decimal`, `TotalSent`: `decimal`}
	_              = bytes.MinRead
)

func testAddressesUpdate(t *testing.T) {
	t.Parallel()

	if len(addressColumns) == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err = address.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAddressesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(addressColumns) == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, address, addressDBTypes, true, addressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(addressColumns, addressPrimaryKeyColumns) {
		fields = addressColumns
	} else {
		fields = strmangle.SetComplement(
			addressColumns,
			addressPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(address))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AddressSlice{address}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAddressesUpsert(t *testing.T) {
	t.Parallel()

	if len(addressColumns) == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	address := Address{}
	if err = randomize.Struct(seed, &address, addressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Address: %s", err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &address, addressDBTypes, false, addressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err = address.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Address: %s", err)
	}

	count, err = Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
