// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TransactionAddress is an object representing the database table.
type TransactionAddress struct {
	TransactionID         uint64    `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	AddressID             uint64    `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`
	DebitAmount           string    `boil:"debit_amount" json:"debit_amount" toml:"debit_amount" yaml:"debit_amount"`
	CreditAmount          string    `boil:"credit_amount" json:"credit_amount" toml:"credit_amount" yaml:"credit_amount"`
	LatestTransactionTime time.Time `boil:"latest_transaction_time" json:"latest_transaction_time" toml:"latest_transaction_time" yaml:"latest_transaction_time"`

	R *transactionAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionAddressColumns = struct {
	TransactionID         string
	AddressID             string
	DebitAmount           string
	CreditAmount          string
	LatestTransactionTime string
}{
	TransactionID:         "transaction_id",
	AddressID:             "address_id",
	DebitAmount:           "debit_amount",
	CreditAmount:          "credit_amount",
	LatestTransactionTime: "latest_transaction_time",
}

// transactionAddressR is where relationships are stored.
type transactionAddressR struct {
	Transaction *Transaction
	Address     *Address
}

// transactionAddressL is where Load methods for each relationship are stored.
type transactionAddressL struct{}

var (
	transactionAddressColumns               = []string{"transaction_id", "address_id", "debit_amount", "credit_amount", "latest_transaction_time"}
	transactionAddressColumnsWithoutDefault = []string{"transaction_id", "address_id"}
	transactionAddressColumnsWithDefault    = []string{"debit_amount", "credit_amount", "latest_transaction_time"}
	transactionAddressPrimaryKeyColumns     = []string{"transaction_id", "address_id"}
)

type (
	// TransactionAddressSlice is an alias for a slice of pointers to TransactionAddress.
	// This should generally be used opposed to []TransactionAddress.
	TransactionAddressSlice []*TransactionAddress

	transactionAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionAddressType                 = reflect.TypeOf(&TransactionAddress{})
	transactionAddressMapping              = queries.MakeStructMapping(transactionAddressType)
	transactionAddressPrimaryKeyMapping, _ = queries.BindMapping(transactionAddressType, transactionAddressMapping, transactionAddressPrimaryKeyColumns)
	transactionAddressInsertCacheMut       sync.RWMutex
	transactionAddressInsertCache          = make(map[string]insertCache)
	transactionAddressUpdateCacheMut       sync.RWMutex
	transactionAddressUpdateCache          = make(map[string]updateCache)
	transactionAddressUpsertCacheMut       sync.RWMutex
	transactionAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single transactionAddress record from the query, and panics on error.
func (q transactionAddressQuery) OneP() *TransactionAddress {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single transactionAddress record from the query.
func (q transactionAddressQuery) One() (*TransactionAddress, error) {
	o := &TransactionAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for transaction_addresses")
	}

	return o, nil
}

// AllP returns all TransactionAddress records from the query, and panics on error.
func (q transactionAddressQuery) AllP() TransactionAddressSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all TransactionAddress records from the query.
func (q transactionAddressQuery) All() (TransactionAddressSlice, error) {
	var o []*TransactionAddress

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TransactionAddress slice")
	}

	return o, nil
}

// CountP returns the count of all TransactionAddress records in the query, and panics on error.
func (q transactionAddressQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all TransactionAddress records in the query.
func (q transactionAddressQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count transaction_addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q transactionAddressQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q transactionAddressQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if transaction_addresses exists")
	}

	return count > 0, nil
}

// TransactionG pointed to by the foreign key.
func (o *TransactionAddress) TransactionG(mods ...qm.QueryMod) transactionQuery {
	return o.Transaction(boil.GetDB(), mods...)
}

// Transaction pointed to by the foreign key.
func (o *TransactionAddress) Transaction(exec boil.Executor, mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(exec, queryMods...)
	queries.SetFrom(query.Query, "`transactions`")

	return query
}

// AddressG pointed to by the foreign key.
func (o *TransactionAddress) AddressG(mods ...qm.QueryMod) addressQuery {
	return o.Address(boil.GetDB(), mods...)
}

// Address pointed to by the foreign key.
func (o *TransactionAddress) Address(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	query := Addresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`addresses`")

	return query
} // LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionAddressL) LoadTransaction(e boil.Executor, singular bool, maybeTransactionAddress interface{}) error {
	var slice []*TransactionAddress
	var object *TransactionAddress

	count := 1
	if singular {
		object = maybeTransactionAddress.(*TransactionAddress)
	} else {
		slice = *maybeTransactionAddress.(*[]*TransactionAddress)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionAddressR{}
		}
		args[0] = object.TransactionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAddressR{}
			}
			args[i] = obj.TransactionID
		}
	}

	query := fmt.Sprintf(
		"select * from `transactions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}
	defer results.Close()

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Transaction = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.Transaction = foreign
				break
			}
		}
	}

	return nil
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionAddressL) LoadAddress(e boil.Executor, singular bool, maybeTransactionAddress interface{}) error {
	var slice []*TransactionAddress
	var object *TransactionAddress

	count := 1
	if singular {
		object = maybeTransactionAddress.(*TransactionAddress)
	} else {
		slice = *maybeTransactionAddress.(*[]*TransactionAddress)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionAddressR{}
		}
		args[0] = object.AddressID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAddressR{}
			}
			args[i] = obj.AddressID
		}
	}

	query := fmt.Sprintf(
		"select * from `addresses` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}
	defer results.Close()

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Address = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddressID == foreign.ID {
				local.R.Address = foreign
				break
			}
		}
	}

	return nil
}

// SetTransactionG of the transaction_address to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAddresses.
// Uses the global database handle.
func (o *TransactionAddress) SetTransactionG(insert bool, related *Transaction) error {
	return o.SetTransaction(boil.GetDB(), insert, related)
}

// SetTransactionP of the transaction_address to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAddresses.
// Panics on error.
func (o *TransactionAddress) SetTransactionP(exec boil.Executor, insert bool, related *Transaction) {
	if err := o.SetTransaction(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionGP of the transaction_address to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAddresses.
// Uses the global database handle and panics on error.
func (o *TransactionAddress) SetTransactionGP(insert bool, related *Transaction) {
	if err := o.SetTransaction(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransaction of the transaction_address to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAddresses.
func (o *TransactionAddress) SetTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transaction_addresses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
		strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TransactionID, o.AddressID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.ID

	if o.R == nil {
		o.R = &transactionAddressR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionAddresses: TransactionAddressSlice{o},
		}
	} else {
		related.R.TransactionAddresses = append(related.R.TransactionAddresses, o)
	}

	return nil
}

// SetAddressG of the transaction_address to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionAddresses.
// Uses the global database handle.
func (o *TransactionAddress) SetAddressG(insert bool, related *Address) error {
	return o.SetAddress(boil.GetDB(), insert, related)
}

// SetAddressP of the transaction_address to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionAddresses.
// Panics on error.
func (o *TransactionAddress) SetAddressP(exec boil.Executor, insert bool, related *Address) {
	if err := o.SetAddress(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressGP of the transaction_address to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionAddresses.
// Uses the global database handle and panics on error.
func (o *TransactionAddress) SetAddressGP(insert bool, related *Address) {
	if err := o.SetAddress(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddress of the transaction_address to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionAddresses.
func (o *TransactionAddress) SetAddress(exec boil.Executor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transaction_addresses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
		strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TransactionID, o.AddressID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AddressID = related.ID

	if o.R == nil {
		o.R = &transactionAddressR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			TransactionAddresses: TransactionAddressSlice{o},
		}
	} else {
		related.R.TransactionAddresses = append(related.R.TransactionAddresses, o)
	}

	return nil
}

// TransactionAddressesG retrieves all records.
func TransactionAddressesG(mods ...qm.QueryMod) transactionAddressQuery {
	return TransactionAddresses(boil.GetDB(), mods...)
}

// TransactionAddresses retrieves all the records using an executor.
func TransactionAddresses(exec boil.Executor, mods ...qm.QueryMod) transactionAddressQuery {
	mods = append(mods, qm.From("`transaction_addresses`"))
	return transactionAddressQuery{NewQuery(exec, mods...)}
}

// FindTransactionAddressG retrieves a single record by ID.
func FindTransactionAddressG(transactionID uint64, addressID uint64, selectCols ...string) (*TransactionAddress, error) {
	return FindTransactionAddress(boil.GetDB(), transactionID, addressID, selectCols...)
}

// FindTransactionAddressGP retrieves a single record by ID, and panics on error.
func FindTransactionAddressGP(transactionID uint64, addressID uint64, selectCols ...string) *TransactionAddress {
	retobj, err := FindTransactionAddress(boil.GetDB(), transactionID, addressID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTransactionAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionAddress(exec boil.Executor, transactionID uint64, addressID uint64, selectCols ...string) (*TransactionAddress, error) {
	transactionAddressObj := &TransactionAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `transaction_addresses` where `transaction_id`=? AND `address_id`=?", sel,
	)

	q := queries.Raw(exec, query, transactionID, addressID)

	err := q.Bind(transactionAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from transaction_addresses")
	}

	return transactionAddressObj, nil
}

// FindTransactionAddressP retrieves a single record by ID with an executor, and panics on error.
func FindTransactionAddressP(exec boil.Executor, transactionID uint64, addressID uint64, selectCols ...string) *TransactionAddress {
	retobj, err := FindTransactionAddress(exec, transactionID, addressID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TransactionAddress) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *TransactionAddress) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TransactionAddress) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *TransactionAddress) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no transaction_addresses provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transactionAddressColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	transactionAddressInsertCacheMut.RLock()
	cache, cached := transactionAddressInsertCache[key]
	transactionAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			transactionAddressColumns,
			transactionAddressColumnsWithDefault,
			transactionAddressColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `transaction_addresses` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `transaction_addresses` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `transaction_addresses` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "model: unable to insert into transaction_addresses")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransactionID,
		o.AddressID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transaction_addresses")
	}

CacheNoHooks:
	if !cached {
		transactionAddressInsertCacheMut.Lock()
		transactionAddressInsertCache[key] = cache
		transactionAddressInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single TransactionAddress record. See Update for
// whitelist behavior description.
func (o *TransactionAddress) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single TransactionAddress record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *TransactionAddress) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the TransactionAddress, and panics on error.
// See Update for whitelist behavior description.
func (o *TransactionAddress) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the TransactionAddress.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *TransactionAddress) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	transactionAddressUpdateCacheMut.RLock()
	cache, cached := transactionAddressUpdateCache[key]
	transactionAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			transactionAddressColumns,
			transactionAddressPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update transaction_addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `transaction_addresses` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, append(wl, transactionAddressPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update transaction_addresses row")
	}

	if !cached {
		transactionAddressUpdateCacheMut.Lock()
		transactionAddressUpdateCache[key] = cache
		transactionAddressUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q transactionAddressQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q transactionAddressQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for transaction_addresses")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransactionAddressSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TransactionAddressSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TransactionAddressSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionAddressSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `transaction_addresses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionAddressPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in transactionAddress slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TransactionAddress) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *TransactionAddress) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TransactionAddress) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TransactionAddress) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no transaction_addresses provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionAddressUpsertCacheMut.RLock()
	cache, cached := transactionAddressUpsertCache[key]
	transactionAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			transactionAddressColumns,
			transactionAddressColumnsWithDefault,
			transactionAddressColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			transactionAddressColumns,
			transactionAddressPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert transaction_addresses, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "transaction_addresses", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `transaction_addresses` WHERE `transaction_id`=? AND `address_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionAddressType, transactionAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for transaction_addresses")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransactionID,
		o.AddressID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transaction_addresses")
	}

CacheNoHooks:
	if !cached {
		transactionAddressUpsertCacheMut.Lock()
		transactionAddressUpsertCache[key] = cache
		transactionAddressUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single TransactionAddress record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TransactionAddress) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single TransactionAddress record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TransactionAddress) DeleteG() error {
	if o == nil {
		return errors.New("model: no TransactionAddress provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single TransactionAddress record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TransactionAddress) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single TransactionAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionAddress) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no TransactionAddress provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionAddressPrimaryKeyMapping)
	sql := "DELETE FROM `transaction_addresses` WHERE `transaction_id`=? AND `address_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from transaction_addresses")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q transactionAddressQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q transactionAddressQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no transactionAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from transaction_addresses")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TransactionAddressSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TransactionAddressSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no TransactionAddress slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TransactionAddressSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionAddressSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no TransactionAddress slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `transaction_addresses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionAddressPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from transactionAddress slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *TransactionAddress) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TransactionAddress) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TransactionAddress) ReloadG() error {
	if o == nil {
		return errors.New("model: no TransactionAddress provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionAddress) Reload(exec boil.Executor) error {
	ret, err := FindTransactionAddress(exec, o.TransactionID, o.AddressID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionAddressSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionAddressSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionAddressSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty TransactionAddressSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionAddressSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	transactionAddresses := TransactionAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `transaction_addresses`.* FROM `transaction_addresses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&transactionAddresses)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TransactionAddressSlice")
	}

	*o = transactionAddresses

	return nil
}

// TransactionAddressExists checks if the TransactionAddress row exists.
func TransactionAddressExists(exec boil.Executor, transactionID uint64, addressID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `transaction_addresses` where `transaction_id`=? AND `address_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, transactionID, addressID)
	}

	row := exec.QueryRow(sql, transactionID, addressID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if transaction_addresses exists")
	}

	return exists, nil
}

// TransactionAddressExistsG checks if the TransactionAddress row exists.
func TransactionAddressExistsG(transactionID uint64, addressID uint64) (bool, error) {
	return TransactionAddressExists(boil.GetDB(), transactionID, addressID)
}

// TransactionAddressExistsGP checks if the TransactionAddress row exists. Panics on error.
func TransactionAddressExistsGP(transactionID uint64, addressID uint64) bool {
	e, err := TransactionAddressExists(boil.GetDB(), transactionID, addressID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TransactionAddressExistsP checks if the TransactionAddress row exists. Panics on error.
func TransactionAddressExistsP(exec boil.Executor, transactionID uint64, addressID uint64) bool {
	e, err := TransactionAddressExists(exec, transactionID, addressID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
