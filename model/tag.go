// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tag is an object representing the database table.
type Tag struct {
	ID         uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Tag        string    `boil:"tag" json:"tag" toml:"tag" yaml:"tag"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedAt time.Time `boil:"modified_at" json:"modified_at" toml:"modified_at" yaml:"modified_at"`

	R *tagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TagColumns = struct {
	ID         string
	Tag        string
	CreatedAt  string
	ModifiedAt string
}{
	ID:         "id",
	Tag:        "tag",
	CreatedAt:  "created_at",
	ModifiedAt: "modified_at",
}

var TagTableColumns = struct {
	ID         string
	Tag        string
	CreatedAt  string
	ModifiedAt string
}{
	ID:         "tag.id",
	Tag:        "tag.tag",
	CreatedAt:  "tag.created_at",
	ModifiedAt: "tag.modified_at",
}

// Generated where

var TagWhere = struct {
	ID         whereHelperuint64
	Tag        whereHelperstring
	CreatedAt  whereHelpertime_Time
	ModifiedAt whereHelpertime_Time
}{
	ID:         whereHelperuint64{field: "`tag`.`id`"},
	Tag:        whereHelperstring{field: "`tag`.`tag`"},
	CreatedAt:  whereHelpertime_Time{field: "`tag`.`created_at`"},
	ModifiedAt: whereHelpertime_Time{field: "`tag`.`modified_at`"},
}

// TagRels is where relationship names are stored.
var TagRels = struct {
	ClaimTags string
}{
	ClaimTags: "ClaimTags",
}

// tagR is where relationships are stored.
type tagR struct {
	ClaimTags ClaimTagSlice `boil:"ClaimTags" json:"ClaimTags" toml:"ClaimTags" yaml:"ClaimTags"`
}

// NewStruct creates a new relationship struct
func (*tagR) NewStruct() *tagR {
	return &tagR{}
}

// tagL is where Load methods for each relationship are stored.
type tagL struct{}

var (
	tagAllColumns            = []string{"id", "tag", "created_at", "modified_at"}
	tagColumnsWithoutDefault = []string{"tag"}
	tagColumnsWithDefault    = []string{"id", "created_at", "modified_at"}
	tagPrimaryKeyColumns     = []string{"id"}
	tagGeneratedColumns      = []string{}
)

type (
	// TagSlice is an alias for a slice of pointers to Tag.
	// This should almost always be used instead of []Tag.
	TagSlice []*Tag

	tagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tagType                 = reflect.TypeOf(&Tag{})
	tagMapping              = queries.MakeStructMapping(tagType)
	tagPrimaryKeyMapping, _ = queries.BindMapping(tagType, tagMapping, tagPrimaryKeyColumns)
	tagInsertCacheMut       sync.RWMutex
	tagInsertCache          = make(map[string]insertCache)
	tagUpdateCacheMut       sync.RWMutex
	tagUpdateCache          = make(map[string]updateCache)
	tagUpsertCacheMut       sync.RWMutex
	tagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single tag record from the query using the global executor.
func (q tagQuery) OneG() (*Tag, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single tag record from the query using the global executor, and panics on error.
func (q tagQuery) OneGP() *Tag {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single tag record from the query, and panics on error.
func (q tagQuery) OneP(exec boil.Executor) *Tag {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single tag record from the query.
func (q tagQuery) One(exec boil.Executor) (*Tag, error) {
	o := &Tag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for tag")
	}

	return o, nil
}

// AllG returns all Tag records from the query using the global executor.
func (q tagQuery) AllG() (TagSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all Tag records from the query using the global executor, and panics on error.
func (q tagQuery) AllGP() TagSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Tag records from the query, and panics on error.
func (q tagQuery) AllP(exec boil.Executor) TagSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Tag records from the query.
func (q tagQuery) All(exec boil.Executor) (TagSlice, error) {
	var o []*Tag

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Tag slice")
	}

	return o, nil
}

// CountG returns the count of all Tag records in the query using the global executor
func (q tagQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all Tag records in the query using the global executor, and panics on error.
func (q tagQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Tag records in the query, and panics on error.
func (q tagQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Tag records in the query.
func (q tagQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count tag rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tagQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q tagQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q tagQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q tagQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if tag exists")
	}

	return count > 0, nil
}

// ClaimTags retrieves all the claim_tag's ClaimTags with an executor.
func (o *Tag) ClaimTags(mods ...qm.QueryMod) claimTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`claim_tag`.`tag_id`=?", o.ID),
	)

	return ClaimTags(queryMods...)
}

// LoadClaimTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tagL) LoadClaimTags(e boil.Executor, singular bool, maybeTag interface{}, mods queries.Applicator) error {
	var slice []*Tag
	var object *Tag

	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*[]*Tag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`claim_tag`),
		qm.WhereIn(`claim_tag.tag_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claim_tag")
	}

	var resultSlice []*ClaimTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claim_tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on claim_tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claim_tag")
	}

	if singular {
		object.R.ClaimTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &claimTagR{}
			}
			foreign.R.Tag = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TagID) {
				local.R.ClaimTags = append(local.R.ClaimTags, foreign)
				if foreign.R == nil {
					foreign.R = &claimTagR{}
				}
				foreign.R.Tag = local
				break
			}
		}
	}

	return nil
}

// AddClaimTagsG adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.ClaimTags.
// Sets related.R.Tag appropriately.
// Uses the global database handle.
func (o *Tag) AddClaimTagsG(insert bool, related ...*ClaimTag) error {
	return o.AddClaimTags(boil.GetDB(), insert, related...)
}

// AddClaimTagsP adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.ClaimTags.
// Sets related.R.Tag appropriately.
// Panics on error.
func (o *Tag) AddClaimTagsP(exec boil.Executor, insert bool, related ...*ClaimTag) {
	if err := o.AddClaimTags(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddClaimTagsGP adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.ClaimTags.
// Sets related.R.Tag appropriately.
// Uses the global database handle and panics on error.
func (o *Tag) AddClaimTagsGP(insert bool, related ...*ClaimTag) {
	if err := o.AddClaimTags(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddClaimTags adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.ClaimTags.
// Sets related.R.Tag appropriately.
func (o *Tag) AddClaimTags(exec boil.Executor, insert bool, related ...*ClaimTag) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TagID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `claim_tag` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"tag_id"}),
				strmangle.WhereClause("`", "`", 0, claimTagPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TagID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tagR{
			ClaimTags: related,
		}
	} else {
		o.R.ClaimTags = append(o.R.ClaimTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimTagR{
				Tag: o,
			}
		} else {
			rel.R.Tag = o
		}
	}
	return nil
}

// SetClaimTagsG removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tag's ClaimTags accordingly.
// Replaces o.R.ClaimTags with related.
// Sets related.R.Tag's ClaimTags accordingly.
// Uses the global database handle.
func (o *Tag) SetClaimTagsG(insert bool, related ...*ClaimTag) error {
	return o.SetClaimTags(boil.GetDB(), insert, related...)
}

// SetClaimTagsP removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tag's ClaimTags accordingly.
// Replaces o.R.ClaimTags with related.
// Sets related.R.Tag's ClaimTags accordingly.
// Panics on error.
func (o *Tag) SetClaimTagsP(exec boil.Executor, insert bool, related ...*ClaimTag) {
	if err := o.SetClaimTags(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClaimTagsGP removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tag's ClaimTags accordingly.
// Replaces o.R.ClaimTags with related.
// Sets related.R.Tag's ClaimTags accordingly.
// Uses the global database handle and panics on error.
func (o *Tag) SetClaimTagsGP(insert bool, related ...*ClaimTag) {
	if err := o.SetClaimTags(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClaimTags removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tag's ClaimTags accordingly.
// Replaces o.R.ClaimTags with related.
// Sets related.R.Tag's ClaimTags accordingly.
func (o *Tag) SetClaimTags(exec boil.Executor, insert bool, related ...*ClaimTag) error {
	query := "update `claim_tag` set `tag_id` = null where `tag_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ClaimTags {
			queries.SetScanner(&rel.TagID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Tag = nil
		}
		o.R.ClaimTags = nil
	}

	return o.AddClaimTags(exec, insert, related...)
}

// RemoveClaimTagsG relationships from objects passed in.
// Removes related items from R.ClaimTags (uses pointer comparison, removal does not keep order)
// Sets related.R.Tag.
// Uses the global database handle.
func (o *Tag) RemoveClaimTagsG(related ...*ClaimTag) error {
	return o.RemoveClaimTags(boil.GetDB(), related...)
}

// RemoveClaimTagsP relationships from objects passed in.
// Removes related items from R.ClaimTags (uses pointer comparison, removal does not keep order)
// Sets related.R.Tag.
// Panics on error.
func (o *Tag) RemoveClaimTagsP(exec boil.Executor, related ...*ClaimTag) {
	if err := o.RemoveClaimTags(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveClaimTagsGP relationships from objects passed in.
// Removes related items from R.ClaimTags (uses pointer comparison, removal does not keep order)
// Sets related.R.Tag.
// Uses the global database handle and panics on error.
func (o *Tag) RemoveClaimTagsGP(related ...*ClaimTag) {
	if err := o.RemoveClaimTags(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveClaimTags relationships from objects passed in.
// Removes related items from R.ClaimTags (uses pointer comparison, removal does not keep order)
// Sets related.R.Tag.
func (o *Tag) RemoveClaimTags(exec boil.Executor, related ...*ClaimTag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TagID, nil)
		if rel.R != nil {
			rel.R.Tag = nil
		}
		if err = rel.Update(exec, boil.Whitelist("tag_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ClaimTags {
			if rel != ri {
				continue
			}

			ln := len(o.R.ClaimTags)
			if ln > 1 && i < ln-1 {
				o.R.ClaimTags[i] = o.R.ClaimTags[ln-1]
			}
			o.R.ClaimTags = o.R.ClaimTags[:ln-1]
			break
		}
	}

	return nil
}

// Tags retrieves all the records using an executor.
func Tags(mods ...qm.QueryMod) tagQuery {
	mods = append(mods, qm.From("`tag`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tag`.*"})
	}

	return tagQuery{q}
}

// FindTagG retrieves a single record by ID.
func FindTagG(iD uint64, selectCols ...string) (*Tag, error) {
	return FindTag(boil.GetDB(), iD, selectCols...)
}

// FindTagP retrieves a single record by ID with an executor, and panics on error.
func FindTagP(exec boil.Executor, iD uint64, selectCols ...string) *Tag {
	retobj, err := FindTag(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTagGP retrieves a single record by ID, and panics on error.
func FindTagGP(iD uint64, selectCols ...string) *Tag {
	retobj, err := FindTag(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTag(exec boil.Executor, iD uint64, selectCols ...string) (*Tag, error) {
	tagObj := &Tag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tag` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, tagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from tag")
	}

	return tagObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Tag) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Tag) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Tag) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tag) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tag provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(tagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tagInsertCacheMut.RLock()
	cache, cached := tagInsertCache[key]
	tagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tagAllColumns,
			tagColumnsWithDefault,
			tagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tagType, tagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tag` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tag` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tag` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into tag")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == tagMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for tag")
	}

CacheNoHooks:
	if !cached {
		tagInsertCacheMut.Lock()
		tagInsertCache[key] = cache
		tagInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Tag record using the global executor.
// See Update for more documentation.
func (o *Tag) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the Tag, and panics on error.
// See Update for more documentation.
func (o *Tag) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single Tag record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Tag) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Tag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tag) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	tagUpdateCacheMut.RLock()
	cache, cached := tagUpdateCache[key]
	tagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tagAllColumns,
			tagPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tag` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, append(wl, tagPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update tag row")
	}

	if !cached {
		tagUpdateCacheMut.Lock()
		tagUpdateCache[key] = cache
		tagUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q tagQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q tagQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q tagQuery) UpdateAllGP(cols M) {
	err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q tagQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for tag")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TagSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TagSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TagSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TagSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tagPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in tag slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Tag) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Tag) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Tag) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLTagUniqueColumns = []string{
	"id",
	"tag",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tag) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tag provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(tagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tagUpsertCacheMut.RLock()
	cache, cached := tagUpsertCache[key]
	tagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tagAllColumns,
			tagColumnsWithDefault,
			tagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tagAllColumns,
			tagPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert tag, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`tag`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tag` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tagType, tagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for tag")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == tagMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tagType, tagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for tag")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for tag")
	}

CacheNoHooks:
	if !cached {
		tagUpsertCacheMut.Lock()
		tagUpsertCache[key] = cache
		tagUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Tag record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Tag) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single Tag record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tag) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single Tag record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tag) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Tag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tag) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Tag provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tagPrimaryKeyMapping)
	sql := "DELETE FROM `tag` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from tag")
	}

	return nil
}

func (q tagQuery) DeleteAllG() error {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q tagQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows, and panics on error.
func (q tagQuery) DeleteAllGP() {
	err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q tagQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no tagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from tag")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o TagSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TagSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TagSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TagSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tagPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from tag slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Tag) ReloadG() error {
	if o == nil {
		return errors.New("model: no Tag provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Tag) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Tag) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tag) Reload(exec boil.Executor) error {
	ret, err := FindTag(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TagSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty TagSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TagSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TagSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TagSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tag`.* FROM `tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TagSlice")
	}

	*o = slice

	return nil
}

// TagExistsG checks if the Tag row exists.
func TagExistsG(iD uint64) (bool, error) {
	return TagExists(boil.GetDB(), iD)
}

// TagExistsP checks if the Tag row exists. Panics on error.
func TagExistsP(exec boil.Executor, iD uint64) bool {
	e, err := TagExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TagExistsGP checks if the Tag row exists. Panics on error.
func TagExistsGP(iD uint64) bool {
	e, err := TagExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TagExists checks if the Tag row exists.
func TagExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tag` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if tag exists")
	}

	return exists, nil
}
