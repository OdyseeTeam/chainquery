// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ApplicationStatus is an object representing the database table.
type ApplicationStatus struct {
	ID          uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	AppVersion  int    `boil:"app_version" json:"app_version" toml:"app_version" yaml:"app_version"`
	DataVersion int    `boil:"data_version" json:"data_version" toml:"data_version" yaml:"data_version"`
	APIVersion  int    `boil:"api_version" json:"api_version" toml:"api_version" yaml:"api_version"`

	R *applicationStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L applicationStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ApplicationStatusColumns = struct {
	ID          string
	AppVersion  string
	DataVersion string
	APIVersion  string
}{
	ID:          "id",
	AppVersion:  "app_version",
	DataVersion: "data_version",
	APIVersion:  "api_version",
}

var ApplicationStatusTableColumns = struct {
	ID          string
	AppVersion  string
	DataVersion string
	APIVersion  string
}{
	ID:          "application_status.id",
	AppVersion:  "application_status.app_version",
	DataVersion: "application_status.data_version",
	APIVersion:  "application_status.api_version",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ApplicationStatusWhere = struct {
	ID          whereHelperuint64
	AppVersion  whereHelperint
	DataVersion whereHelperint
	APIVersion  whereHelperint
}{
	ID:          whereHelperuint64{field: "`application_status`.`id`"},
	AppVersion:  whereHelperint{field: "`application_status`.`app_version`"},
	DataVersion: whereHelperint{field: "`application_status`.`data_version`"},
	APIVersion:  whereHelperint{field: "`application_status`.`api_version`"},
}

// ApplicationStatusRels is where relationship names are stored.
var ApplicationStatusRels = struct {
}{}

// applicationStatusR is where relationships are stored.
type applicationStatusR struct {
}

// NewStruct creates a new relationship struct
func (*applicationStatusR) NewStruct() *applicationStatusR {
	return &applicationStatusR{}
}

// applicationStatusL is where Load methods for each relationship are stored.
type applicationStatusL struct{}

var (
	applicationStatusAllColumns            = []string{"id", "app_version", "data_version", "api_version"}
	applicationStatusColumnsWithoutDefault = []string{"app_version", "data_version", "api_version"}
	applicationStatusColumnsWithDefault    = []string{"id"}
	applicationStatusPrimaryKeyColumns     = []string{"id"}
	applicationStatusGeneratedColumns      = []string{}
)

type (
	// ApplicationStatusSlice is an alias for a slice of pointers to ApplicationStatus.
	// This should almost always be used instead of []ApplicationStatus.
	ApplicationStatusSlice []*ApplicationStatus

	applicationStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	applicationStatusType                 = reflect.TypeOf(&ApplicationStatus{})
	applicationStatusMapping              = queries.MakeStructMapping(applicationStatusType)
	applicationStatusPrimaryKeyMapping, _ = queries.BindMapping(applicationStatusType, applicationStatusMapping, applicationStatusPrimaryKeyColumns)
	applicationStatusInsertCacheMut       sync.RWMutex
	applicationStatusInsertCache          = make(map[string]insertCache)
	applicationStatusUpdateCacheMut       sync.RWMutex
	applicationStatusUpdateCache          = make(map[string]updateCache)
	applicationStatusUpsertCacheMut       sync.RWMutex
	applicationStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single applicationStatus record from the query using the global executor.
func (q applicationStatusQuery) OneG() (*ApplicationStatus, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single applicationStatus record from the query using the global executor, and panics on error.
func (q applicationStatusQuery) OneGP() *ApplicationStatus {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single applicationStatus record from the query, and panics on error.
func (q applicationStatusQuery) OneP(exec boil.Executor) *ApplicationStatus {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single applicationStatus record from the query.
func (q applicationStatusQuery) One(exec boil.Executor) (*ApplicationStatus, error) {
	o := &ApplicationStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for application_status")
	}

	return o, nil
}

// AllG returns all ApplicationStatus records from the query using the global executor.
func (q applicationStatusQuery) AllG() (ApplicationStatusSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all ApplicationStatus records from the query using the global executor, and panics on error.
func (q applicationStatusQuery) AllGP() ApplicationStatusSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all ApplicationStatus records from the query, and panics on error.
func (q applicationStatusQuery) AllP(exec boil.Executor) ApplicationStatusSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ApplicationStatus records from the query.
func (q applicationStatusQuery) All(exec boil.Executor) (ApplicationStatusSlice, error) {
	var o []*ApplicationStatus

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ApplicationStatus slice")
	}

	return o, nil
}

// CountG returns the count of all ApplicationStatus records in the query using the global executor
func (q applicationStatusQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all ApplicationStatus records in the query using the global executor, and panics on error.
func (q applicationStatusQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all ApplicationStatus records in the query, and panics on error.
func (q applicationStatusQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ApplicationStatus records in the query.
func (q applicationStatusQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count application_status rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q applicationStatusQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q applicationStatusQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q applicationStatusQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q applicationStatusQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if application_status exists")
	}

	return count > 0, nil
}

// ApplicationStatuses retrieves all the records using an executor.
func ApplicationStatuses(mods ...qm.QueryMod) applicationStatusQuery {
	mods = append(mods, qm.From("`application_status`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`application_status`.*"})
	}

	return applicationStatusQuery{q}
}

// FindApplicationStatusG retrieves a single record by ID.
func FindApplicationStatusG(iD uint64, selectCols ...string) (*ApplicationStatus, error) {
	return FindApplicationStatus(boil.GetDB(), iD, selectCols...)
}

// FindApplicationStatusP retrieves a single record by ID with an executor, and panics on error.
func FindApplicationStatusP(exec boil.Executor, iD uint64, selectCols ...string) *ApplicationStatus {
	retobj, err := FindApplicationStatus(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindApplicationStatusGP retrieves a single record by ID, and panics on error.
func FindApplicationStatusGP(iD uint64, selectCols ...string) *ApplicationStatus {
	retobj, err := FindApplicationStatus(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindApplicationStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApplicationStatus(exec boil.Executor, iD uint64, selectCols ...string) (*ApplicationStatus, error) {
	applicationStatusObj := &ApplicationStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `application_status` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, applicationStatusObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from application_status")
	}

	return applicationStatusObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ApplicationStatus) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ApplicationStatus) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ApplicationStatus) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ApplicationStatus) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no application_status provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(applicationStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	applicationStatusInsertCacheMut.RLock()
	cache, cached := applicationStatusInsertCache[key]
	applicationStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			applicationStatusAllColumns,
			applicationStatusColumnsWithDefault,
			applicationStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `application_status` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `application_status` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `application_status` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, applicationStatusPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into application_status")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == applicationStatusMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for application_status")
	}

CacheNoHooks:
	if !cached {
		applicationStatusInsertCacheMut.Lock()
		applicationStatusInsertCache[key] = cache
		applicationStatusInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ApplicationStatus record using the global executor.
// See Update for more documentation.
func (o *ApplicationStatus) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the ApplicationStatus, and panics on error.
// See Update for more documentation.
func (o *ApplicationStatus) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single ApplicationStatus record using the global executor. Panics on error.
// See Update for more documentation.
func (o *ApplicationStatus) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the ApplicationStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ApplicationStatus) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	applicationStatusUpdateCacheMut.RLock()
	cache, cached := applicationStatusUpdateCache[key]
	applicationStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			applicationStatusAllColumns,
			applicationStatusPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update application_status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `application_status` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, applicationStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, append(wl, applicationStatusPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update application_status row")
	}

	if !cached {
		applicationStatusUpdateCacheMut.Lock()
		applicationStatusUpdateCache[key] = cache
		applicationStatusUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q applicationStatusQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q applicationStatusQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q applicationStatusQuery) UpdateAllGP(cols M) {
	err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q applicationStatusQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for application_status")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ApplicationStatusSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ApplicationStatusSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ApplicationStatusSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ApplicationStatusSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `application_status` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, applicationStatusPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in applicationStatus slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ApplicationStatus) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ApplicationStatus) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ApplicationStatus) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLApplicationStatusUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ApplicationStatus) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no application_status provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(applicationStatusColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLApplicationStatusUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	applicationStatusUpsertCacheMut.RLock()
	cache, cached := applicationStatusUpsertCache[key]
	applicationStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			applicationStatusAllColumns,
			applicationStatusColumnsWithDefault,
			applicationStatusColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			applicationStatusAllColumns,
			applicationStatusPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert application_status, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`application_status`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `application_status` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for application_status")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == applicationStatusMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for application_status")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for application_status")
	}

CacheNoHooks:
	if !cached {
		applicationStatusUpsertCacheMut.Lock()
		applicationStatusUpsertCache[key] = cache
		applicationStatusUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single ApplicationStatus record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ApplicationStatus) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single ApplicationStatus record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ApplicationStatus) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single ApplicationStatus record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ApplicationStatus) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single ApplicationStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ApplicationStatus) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no ApplicationStatus provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), applicationStatusPrimaryKeyMapping)
	sql := "DELETE FROM `application_status` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from application_status")
	}

	return nil
}

func (q applicationStatusQuery) DeleteAllG() error {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q applicationStatusQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows, and panics on error.
func (q applicationStatusQuery) DeleteAllGP() {
	err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q applicationStatusQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no applicationStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from application_status")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o ApplicationStatusSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ApplicationStatusSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ApplicationStatusSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ApplicationStatusSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `application_status` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, applicationStatusPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from applicationStatus slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ApplicationStatus) ReloadG() error {
	if o == nil {
		return errors.New("model: no ApplicationStatus provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ApplicationStatus) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ApplicationStatus) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ApplicationStatus) Reload(exec boil.Executor) error {
	ret, err := FindApplicationStatus(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApplicationStatusSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty ApplicationStatusSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ApplicationStatusSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ApplicationStatusSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApplicationStatusSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ApplicationStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `application_status`.* FROM `application_status` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, applicationStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ApplicationStatusSlice")
	}

	*o = slice

	return nil
}

// ApplicationStatusExistsG checks if the ApplicationStatus row exists.
func ApplicationStatusExistsG(iD uint64) (bool, error) {
	return ApplicationStatusExists(boil.GetDB(), iD)
}

// ApplicationStatusExistsP checks if the ApplicationStatus row exists. Panics on error.
func ApplicationStatusExistsP(exec boil.Executor, iD uint64) bool {
	e, err := ApplicationStatusExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ApplicationStatusExistsGP checks if the ApplicationStatus row exists. Panics on error.
func ApplicationStatusExistsGP(iD uint64) bool {
	e, err := ApplicationStatusExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ApplicationStatusExists checks if the ApplicationStatus row exists.
func ApplicationStatusExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `application_status` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if application_status exists")
	}

	return exists, nil
}
