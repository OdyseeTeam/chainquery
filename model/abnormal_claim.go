// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AbnormalClaim is an object representing the database table.
type AbnormalClaim struct {
	ID              uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	ClaimID         string      `boil:"claim_id" json:"claim_id" toml:"claim_id" yaml:"claim_id"`
	IsUpdate        bool        `boil:"is_update" json:"is_update" toml:"is_update" yaml:"is_update"`
	BlockHash       null.String `boil:"block_hash" json:"block_hash,omitempty" toml:"block_hash" yaml:"block_hash,omitempty"`
	TransactionHash null.String `boil:"transaction_hash" json:"transaction_hash,omitempty" toml:"transaction_hash" yaml:"transaction_hash,omitempty"`
	Vout            uint        `boil:"vout" json:"vout" toml:"vout" yaml:"vout"`
	OutputID        uint64      `boil:"output_id" json:"output_id" toml:"output_id" yaml:"output_id"`
	ValueAsHex      string      `boil:"value_as_hex" json:"value_as_hex" toml:"value_as_hex" yaml:"value_as_hex"`
	ValueAsJSON     null.String `boil:"value_as_json" json:"value_as_json,omitempty" toml:"value_as_json" yaml:"value_as_json,omitempty"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedAt      time.Time   `boil:"modified_at" json:"modified_at" toml:"modified_at" yaml:"modified_at"`

	R *abnormalClaimR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L abnormalClaimL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AbnormalClaimColumns = struct {
	ID              string
	Name            string
	ClaimID         string
	IsUpdate        string
	BlockHash       string
	TransactionHash string
	Vout            string
	OutputID        string
	ValueAsHex      string
	ValueAsJSON     string
	CreatedAt       string
	ModifiedAt      string
}{
	ID:              "id",
	Name:            "name",
	ClaimID:         "claim_id",
	IsUpdate:        "is_update",
	BlockHash:       "block_hash",
	TransactionHash: "transaction_hash",
	Vout:            "vout",
	OutputID:        "output_id",
	ValueAsHex:      "value_as_hex",
	ValueAsJSON:     "value_as_json",
	CreatedAt:       "created_at",
	ModifiedAt:      "modified_at",
}

var AbnormalClaimTableColumns = struct {
	ID              string
	Name            string
	ClaimID         string
	IsUpdate        string
	BlockHash       string
	TransactionHash string
	Vout            string
	OutputID        string
	ValueAsHex      string
	ValueAsJSON     string
	CreatedAt       string
	ModifiedAt      string
}{
	ID:              "abnormal_claim.id",
	Name:            "abnormal_claim.name",
	ClaimID:         "abnormal_claim.claim_id",
	IsUpdate:        "abnormal_claim.is_update",
	BlockHash:       "abnormal_claim.block_hash",
	TransactionHash: "abnormal_claim.transaction_hash",
	Vout:            "abnormal_claim.vout",
	OutputID:        "abnormal_claim.output_id",
	ValueAsHex:      "abnormal_claim.value_as_hex",
	ValueAsJSON:     "abnormal_claim.value_as_json",
	CreatedAt:       "abnormal_claim.created_at",
	ModifiedAt:      "abnormal_claim.modified_at",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AbnormalClaimWhere = struct {
	ID              whereHelperuint64
	Name            whereHelperstring
	ClaimID         whereHelperstring
	IsUpdate        whereHelperbool
	BlockHash       whereHelpernull_String
	TransactionHash whereHelpernull_String
	Vout            whereHelperuint
	OutputID        whereHelperuint64
	ValueAsHex      whereHelperstring
	ValueAsJSON     whereHelpernull_String
	CreatedAt       whereHelpertime_Time
	ModifiedAt      whereHelpertime_Time
}{
	ID:              whereHelperuint64{field: "`abnormal_claim`.`id`"},
	Name:            whereHelperstring{field: "`abnormal_claim`.`name`"},
	ClaimID:         whereHelperstring{field: "`abnormal_claim`.`claim_id`"},
	IsUpdate:        whereHelperbool{field: "`abnormal_claim`.`is_update`"},
	BlockHash:       whereHelpernull_String{field: "`abnormal_claim`.`block_hash`"},
	TransactionHash: whereHelpernull_String{field: "`abnormal_claim`.`transaction_hash`"},
	Vout:            whereHelperuint{field: "`abnormal_claim`.`vout`"},
	OutputID:        whereHelperuint64{field: "`abnormal_claim`.`output_id`"},
	ValueAsHex:      whereHelperstring{field: "`abnormal_claim`.`value_as_hex`"},
	ValueAsJSON:     whereHelpernull_String{field: "`abnormal_claim`.`value_as_json`"},
	CreatedAt:       whereHelpertime_Time{field: "`abnormal_claim`.`created_at`"},
	ModifiedAt:      whereHelpertime_Time{field: "`abnormal_claim`.`modified_at`"},
}

// AbnormalClaimRels is where relationship names are stored.
var AbnormalClaimRels = struct {
	Output string
}{
	Output: "Output",
}

// abnormalClaimR is where relationships are stored.
type abnormalClaimR struct {
	Output *Output `boil:"Output" json:"Output" toml:"Output" yaml:"Output"`
}

// NewStruct creates a new relationship struct
func (*abnormalClaimR) NewStruct() *abnormalClaimR {
	return &abnormalClaimR{}
}

// abnormalClaimL is where Load methods for each relationship are stored.
type abnormalClaimL struct{}

var (
	abnormalClaimAllColumns            = []string{"id", "name", "claim_id", "is_update", "block_hash", "transaction_hash", "vout", "output_id", "value_as_hex", "value_as_json", "created_at", "modified_at"}
	abnormalClaimColumnsWithoutDefault = []string{"name", "claim_id", "block_hash", "transaction_hash", "vout", "output_id", "value_as_hex", "value_as_json"}
	abnormalClaimColumnsWithDefault    = []string{"id", "is_update", "created_at", "modified_at"}
	abnormalClaimPrimaryKeyColumns     = []string{"id"}
	abnormalClaimGeneratedColumns      = []string{}
)

type (
	// AbnormalClaimSlice is an alias for a slice of pointers to AbnormalClaim.
	// This should almost always be used instead of []AbnormalClaim.
	AbnormalClaimSlice []*AbnormalClaim

	abnormalClaimQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	abnormalClaimType                 = reflect.TypeOf(&AbnormalClaim{})
	abnormalClaimMapping              = queries.MakeStructMapping(abnormalClaimType)
	abnormalClaimPrimaryKeyMapping, _ = queries.BindMapping(abnormalClaimType, abnormalClaimMapping, abnormalClaimPrimaryKeyColumns)
	abnormalClaimInsertCacheMut       sync.RWMutex
	abnormalClaimInsertCache          = make(map[string]insertCache)
	abnormalClaimUpdateCacheMut       sync.RWMutex
	abnormalClaimUpdateCache          = make(map[string]updateCache)
	abnormalClaimUpsertCacheMut       sync.RWMutex
	abnormalClaimUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single abnormalClaim record from the query using the global executor.
func (q abnormalClaimQuery) OneG() (*AbnormalClaim, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single abnormalClaim record from the query using the global executor, and panics on error.
func (q abnormalClaimQuery) OneGP() *AbnormalClaim {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single abnormalClaim record from the query, and panics on error.
func (q abnormalClaimQuery) OneP(exec boil.Executor) *AbnormalClaim {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single abnormalClaim record from the query.
func (q abnormalClaimQuery) One(exec boil.Executor) (*AbnormalClaim, error) {
	o := &AbnormalClaim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for abnormal_claim")
	}

	return o, nil
}

// AllG returns all AbnormalClaim records from the query using the global executor.
func (q abnormalClaimQuery) AllG() (AbnormalClaimSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all AbnormalClaim records from the query using the global executor, and panics on error.
func (q abnormalClaimQuery) AllGP() AbnormalClaimSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all AbnormalClaim records from the query, and panics on error.
func (q abnormalClaimQuery) AllP(exec boil.Executor) AbnormalClaimSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AbnormalClaim records from the query.
func (q abnormalClaimQuery) All(exec boil.Executor) (AbnormalClaimSlice, error) {
	var o []*AbnormalClaim

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to AbnormalClaim slice")
	}

	return o, nil
}

// CountG returns the count of all AbnormalClaim records in the query using the global executor
func (q abnormalClaimQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all AbnormalClaim records in the query using the global executor, and panics on error.
func (q abnormalClaimQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all AbnormalClaim records in the query, and panics on error.
func (q abnormalClaimQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AbnormalClaim records in the query.
func (q abnormalClaimQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count abnormal_claim rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q abnormalClaimQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q abnormalClaimQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q abnormalClaimQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q abnormalClaimQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if abnormal_claim exists")
	}

	return count > 0, nil
}

// Output pointed to by the foreign key.
func (o *AbnormalClaim) Output(mods ...qm.QueryMod) outputQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OutputID),
	}

	queryMods = append(queryMods, mods...)

	return Outputs(queryMods...)
}

// LoadOutput allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (abnormalClaimL) LoadOutput(e boil.Executor, singular bool, maybeAbnormalClaim interface{}, mods queries.Applicator) error {
	var slice []*AbnormalClaim
	var object *AbnormalClaim

	if singular {
		object = maybeAbnormalClaim.(*AbnormalClaim)
	} else {
		slice = *maybeAbnormalClaim.(*[]*AbnormalClaim)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &abnormalClaimR{}
		}
		args = append(args, object.OutputID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &abnormalClaimR{}
			}

			for _, a := range args {
				if a == obj.OutputID {
					continue Outer
				}
			}

			args = append(args, obj.OutputID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`output`),
		qm.WhereIn(`output.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Output")
	}

	var resultSlice []*Output
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Output")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for output")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for output")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Output = foreign
		if foreign.R == nil {
			foreign.R = &outputR{}
		}
		foreign.R.AbnormalClaims = append(foreign.R.AbnormalClaims, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OutputID == foreign.ID {
				local.R.Output = foreign
				if foreign.R == nil {
					foreign.R = &outputR{}
				}
				foreign.R.AbnormalClaims = append(foreign.R.AbnormalClaims, local)
				break
			}
		}
	}

	return nil
}

// SetOutputG of the abnormalClaim to the related item.
// Sets o.R.Output to related.
// Adds o to related.R.AbnormalClaims.
// Uses the global database handle.
func (o *AbnormalClaim) SetOutputG(insert bool, related *Output) error {
	return o.SetOutput(boil.GetDB(), insert, related)
}

// SetOutputP of the abnormalClaim to the related item.
// Sets o.R.Output to related.
// Adds o to related.R.AbnormalClaims.
// Panics on error.
func (o *AbnormalClaim) SetOutputP(exec boil.Executor, insert bool, related *Output) {
	if err := o.SetOutput(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOutputGP of the abnormalClaim to the related item.
// Sets o.R.Output to related.
// Adds o to related.R.AbnormalClaims.
// Uses the global database handle and panics on error.
func (o *AbnormalClaim) SetOutputGP(insert bool, related *Output) {
	if err := o.SetOutput(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOutput of the abnormalClaim to the related item.
// Sets o.R.Output to related.
// Adds o to related.R.AbnormalClaims.
func (o *AbnormalClaim) SetOutput(exec boil.Executor, insert bool, related *Output) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `abnormal_claim` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"output_id"}),
		strmangle.WhereClause("`", "`", 0, abnormalClaimPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OutputID = related.ID
	if o.R == nil {
		o.R = &abnormalClaimR{
			Output: related,
		}
	} else {
		o.R.Output = related
	}

	if related.R == nil {
		related.R = &outputR{
			AbnormalClaims: AbnormalClaimSlice{o},
		}
	} else {
		related.R.AbnormalClaims = append(related.R.AbnormalClaims, o)
	}

	return nil
}

// AbnormalClaims retrieves all the records using an executor.
func AbnormalClaims(mods ...qm.QueryMod) abnormalClaimQuery {
	mods = append(mods, qm.From("`abnormal_claim`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`abnormal_claim`.*"})
	}

	return abnormalClaimQuery{q}
}

// FindAbnormalClaimG retrieves a single record by ID.
func FindAbnormalClaimG(iD uint64, selectCols ...string) (*AbnormalClaim, error) {
	return FindAbnormalClaim(boil.GetDB(), iD, selectCols...)
}

// FindAbnormalClaimP retrieves a single record by ID with an executor, and panics on error.
func FindAbnormalClaimP(exec boil.Executor, iD uint64, selectCols ...string) *AbnormalClaim {
	retobj, err := FindAbnormalClaim(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAbnormalClaimGP retrieves a single record by ID, and panics on error.
func FindAbnormalClaimGP(iD uint64, selectCols ...string) *AbnormalClaim {
	retobj, err := FindAbnormalClaim(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAbnormalClaim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAbnormalClaim(exec boil.Executor, iD uint64, selectCols ...string) (*AbnormalClaim, error) {
	abnormalClaimObj := &AbnormalClaim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `abnormal_claim` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, abnormalClaimObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from abnormal_claim")
	}

	return abnormalClaimObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AbnormalClaim) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AbnormalClaim) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AbnormalClaim) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AbnormalClaim) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no abnormal_claim provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(abnormalClaimColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	abnormalClaimInsertCacheMut.RLock()
	cache, cached := abnormalClaimInsertCache[key]
	abnormalClaimInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			abnormalClaimAllColumns,
			abnormalClaimColumnsWithDefault,
			abnormalClaimColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(abnormalClaimType, abnormalClaimMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(abnormalClaimType, abnormalClaimMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `abnormal_claim` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `abnormal_claim` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `abnormal_claim` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, abnormalClaimPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into abnormal_claim")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == abnormalClaimMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for abnormal_claim")
	}

CacheNoHooks:
	if !cached {
		abnormalClaimInsertCacheMut.Lock()
		abnormalClaimInsertCache[key] = cache
		abnormalClaimInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single AbnormalClaim record using the global executor.
// See Update for more documentation.
func (o *AbnormalClaim) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the AbnormalClaim, and panics on error.
// See Update for more documentation.
func (o *AbnormalClaim) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single AbnormalClaim record using the global executor. Panics on error.
// See Update for more documentation.
func (o *AbnormalClaim) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the AbnormalClaim.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AbnormalClaim) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	abnormalClaimUpdateCacheMut.RLock()
	cache, cached := abnormalClaimUpdateCache[key]
	abnormalClaimUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			abnormalClaimAllColumns,
			abnormalClaimPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update abnormal_claim, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `abnormal_claim` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, abnormalClaimPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(abnormalClaimType, abnormalClaimMapping, append(wl, abnormalClaimPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update abnormal_claim row")
	}

	if !cached {
		abnormalClaimUpdateCacheMut.Lock()
		abnormalClaimUpdateCache[key] = cache
		abnormalClaimUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q abnormalClaimQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q abnormalClaimQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q abnormalClaimQuery) UpdateAllGP(cols M) {
	err := q.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q abnormalClaimQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for abnormal_claim")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AbnormalClaimSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AbnormalClaimSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AbnormalClaimSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AbnormalClaimSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), abnormalClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `abnormal_claim` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, abnormalClaimPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in abnormalClaim slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AbnormalClaim) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *AbnormalClaim) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *AbnormalClaim) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLAbnormalClaimUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AbnormalClaim) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no abnormal_claim provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(abnormalClaimColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAbnormalClaimUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	abnormalClaimUpsertCacheMut.RLock()
	cache, cached := abnormalClaimUpsertCache[key]
	abnormalClaimUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			abnormalClaimAllColumns,
			abnormalClaimColumnsWithDefault,
			abnormalClaimColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			abnormalClaimAllColumns,
			abnormalClaimPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert abnormal_claim, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`abnormal_claim`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `abnormal_claim` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(abnormalClaimType, abnormalClaimMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(abnormalClaimType, abnormalClaimMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for abnormal_claim")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == abnormalClaimMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(abnormalClaimType, abnormalClaimMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for abnormal_claim")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for abnormal_claim")
	}

CacheNoHooks:
	if !cached {
		abnormalClaimUpsertCacheMut.Lock()
		abnormalClaimUpsertCache[key] = cache
		abnormalClaimUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single AbnormalClaim record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AbnormalClaim) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single AbnormalClaim record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AbnormalClaim) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single AbnormalClaim record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AbnormalClaim) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single AbnormalClaim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AbnormalClaim) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no AbnormalClaim provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), abnormalClaimPrimaryKeyMapping)
	sql := "DELETE FROM `abnormal_claim` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from abnormal_claim")
	}

	return nil
}

func (q abnormalClaimQuery) DeleteAllG() error {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q abnormalClaimQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows, and panics on error.
func (q abnormalClaimQuery) DeleteAllGP() {
	err := q.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q abnormalClaimQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no abnormalClaimQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from abnormal_claim")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o AbnormalClaimSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AbnormalClaimSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AbnormalClaimSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AbnormalClaimSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), abnormalClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `abnormal_claim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, abnormalClaimPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from abnormalClaim slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AbnormalClaim) ReloadG() error {
	if o == nil {
		return errors.New("model: no AbnormalClaim provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *AbnormalClaim) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *AbnormalClaim) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AbnormalClaim) Reload(exec boil.Executor) error {
	ret, err := FindAbnormalClaim(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AbnormalClaimSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty AbnormalClaimSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AbnormalClaimSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AbnormalClaimSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AbnormalClaimSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AbnormalClaimSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), abnormalClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `abnormal_claim`.* FROM `abnormal_claim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, abnormalClaimPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in AbnormalClaimSlice")
	}

	*o = slice

	return nil
}

// AbnormalClaimExistsG checks if the AbnormalClaim row exists.
func AbnormalClaimExistsG(iD uint64) (bool, error) {
	return AbnormalClaimExists(boil.GetDB(), iD)
}

// AbnormalClaimExistsP checks if the AbnormalClaim row exists. Panics on error.
func AbnormalClaimExistsP(exec boil.Executor, iD uint64) bool {
	e, err := AbnormalClaimExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AbnormalClaimExistsGP checks if the AbnormalClaim row exists. Panics on error.
func AbnormalClaimExistsGP(iD uint64) bool {
	e, err := AbnormalClaimExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AbnormalClaimExists checks if the AbnormalClaim row exists.
func AbnormalClaimExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `abnormal_claim` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if abnormal_claim exists")
	}

	return exists, nil
}
